{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,QAAQ,QAAR,GAAmB,UAAC,SAAD,EAAY,KAAZ,EAAmB,WAAnB,EAAmC;AACpD,MAAM,SAAS,EAAE,SAAS,IAAX,EAAf;;AAEA,MAAI,OAAO,SAAP,KAAqB,UAAzB,EAAqC;AACnC,gBAAY,EAAE,OAAO,SAAT,EAAZ;AACA,YAAQ,EAAE,OAAO,KAAT,EAAR;AACD;;AAED,SAAO,IAAP,CAAY,SAAZ,EAAuB,OAAvB,CAA+B,eAAO;AACpC,QAAM,YAAY,UAAU,GAAV,CAAlB;AACA,QAAM,QAAQ,UAAU,KAAV,EAAiB,GAAjB,EAAsB,WAAtB,CAAd;;AAEA,QAAI,UAAU,IAAd,EAAoB;AAClB,aAAO,OAAP,GAAiB,KAAjB;AACA,aAAO,MAAP,GAAgB,OAAO,MAAP,IAAiB,EAAjC;AACA,aAAO,MAAP,CAAc,GAAd,IAAqB,KAArB;AACD;AACF,GATD;;AAWA,SAAO,MAAP;AACD,CApBD;;AAsBA,QAAQ,SAAR,GAAoB,QAAQ,aAAR,CAApB","file":"index.js","sourcesContent":["/**\n * Performs validation on the a set of properties.\n *\n * @param {Object|Function} propTypes\n *        An object containing the property-type definitions (schema) or a\n *        single PropType.\n *\n * @param {Object} props\n *        An object of properties to validate or a single value of a single\n *        <propTypes> definiiton was passed.\n *\n * @param {String} [displayName]\n *        The name of the component or module being validated.\n *\n *        Used in formatting the error message(s).\n *\n * @return {Object} result\n *         The validation results. Looks something like this:\n *\n *         {\n *           isValid: Boolean,\n *           errors: Object.<String, String>?\n *         }\n */\nexports.validate = (propTypes, props, displayName) => {\n  const result = { isValid: true };\n\n  if (typeof propTypes === 'function') {\n    propTypes = { value: propTypes };\n    props = { value: props };\n  }\n\n  Object.keys(propTypes).forEach(key => {\n    const validator = propTypes[key];\n    const error = validator(props, key, displayName);\n\n    if (error !== null) {\n      result.isValid = false;\n      result.errors = result.errors || {};\n      result.errors[key] = error;\n    }\n  });\n\n  return result;\n};\n\nexports.PropTypes = require('./PropTypes');\n"]}
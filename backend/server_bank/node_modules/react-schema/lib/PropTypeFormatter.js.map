{"version":3,"sources":["../src/PropTypeFormatter.js"],"names":[],"mappings":";;;;;;;;;AAEA;;;;;;AACA,IAAM,aAAa,EAAnB;;AAGO,IAAM,4CAAkB,SAAlB,eAAkB,CAAC,QAAD,EAAW,SAAX;AAAA,SAA0B,WAAW,QAAX,IAAuB,SAAjD;AAAA,CAAxB;;AAEA,IAAM,0BAAS,SAAT,MAAS,CAAC,OAAD,EAAa;AACjC,MAAM,WAAW,2BAAY,OAAZ,CAAjB;AACA,MAAM,YAAY,WAAW,QAAX,CAAlB;;AAEA,MAAI,aAAa,OAAb,IAAwB,QAAQ,KAApC,EAA2C;AACzC,WAAO,UAAU,QAAQ,KAAR,CAAc,IAAxB,CAAP;AACD;;AAED,SAAO,QAAP;AACD,CATM;;AAYP,IAAM,gBAAgB,SAAhB,aAAgB,CAAC,GAAD,EAAS;AAC7B,MAAM,SAAS,EAAf;AACA,SAAO,IAAP,CAAY,GAAZ,EAAiB,OAAjB,CAAyB,eAAO;AAC9B,QAAM,QAAQ,IAAI,GAAJ,CAAd;AACA,QAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,aAAO,GAAP,WAAmB,2BAAY,KAAZ,KAAsB,SAAzC;AAED,KAHD,MAGO,IAAI,SAAS,QAAO,KAAP,yCAAO,KAAP,OAAiB,QAA9B,EAAwC;AAC7C,aAAO,GAAP,IAAc,cAAc,KAAd,CAAd,C;AACD;AACF,GARD;AASA,SAAO,MAAP;AACD,CAZD;;AAgBA,gBAAgB,OAAhB,EAAyB,iBAAS;AAChC,MAAI,SAAS,cAAc,KAAd,CAAb;AACA,WAAS,KAAK,SAAL,CAAe,MAAf,EAAuB,OAAvB,CAA+B,KAA/B,EAAsC,EAAtC,CAAT;AACA,oBAAiB,MAAjB;AACD,CAJD;;AAMA,gBAAgB,WAAhB,EAA6B,iBAAS;AACpC,MAAM,YAAY,MAAM,GAAN,CAAU,MAAV,EAAkB,IAAlB,CAAuB,IAAvB,CAAlB;AACA,wBAAqB,SAArB;AACD,CAHD;;AAKA,gBAAgB,OAAhB,EAAyB;AAAA,oBAAwB,WAAW,IAAX,CAAgB,IAAhB,CAAxB;AAAA,CAAzB","file":"PropTypeFormatter.js","sourcesContent":["/* eslint no-useless-escape:0  */\n\nimport getTypeName from './utils/getTypeName';\nconst formatters = {};\n\n\nexport const defineFormatter = (typeName, formatter) => (formatters[typeName] = formatter);\n\nexport const format = (checker) => {\n  const typeName = getTypeName(checker);\n  const formatter = formatters[typeName];\n\n  if (formatter && checker && checker.$meta) {\n    return formatter(checker.$meta.args);\n  }\n\n  return typeName;\n};\n\n\nconst shapeToObject = (obj) => {\n  const result = {};\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value === 'function') {\n      result[key] = `<${ getTypeName(value) || 'unknown' }>`;\n\n    } else if (value && typeof value === 'object') {\n      result[key] = shapeToObject(value); // <== RECURSION.\n    }\n  });\n  return result;\n};\n\n\n\ndefineFormatter('shape', shape => {\n  let output = shapeToObject(shape);\n  output = JSON.stringify(output).replace(/\\\"/g, '');\n  return `shape(${ output })`;\n});\n\ndefineFormatter('oneOfType', types => {\n  const typeNames = types.map(format).join(', ');\n  return `oneOfType(${ typeNames })`;\n});\n\ndefineFormatter('oneOf', enumValues => `oneOf(${ enumValues.join(', ') })`);\n"]}
{"version":3,"sources":["../src/schemaToObject.js"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;AAWA,IAAM,iBAAiB,SAAjB,cAAiB,CAAC,IAAD,EAAU;AAC/B,MAAI,KAAK,IAAL,KAAc,OAAlB,EAA2B;AACzB,WAAO,KAAK,UAAL,CAAgB,MAAhB,CAAuB,UAAC,IAAD,EAAO,KAAP,EAAiB;AAC7C,WAAK,MAAM,IAAX,IAAmB,eAAe,KAAf,CAAnB;AACA,aAAO,IAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAKD,GAND,MAMO,IAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAClC,WAAO,CAAC,eAAe,KAAK,OAApB,CAAD,CAAP;AAED,GAHM,MAGA,IAAI,KAAK,IAAL,KAAc,SAAlB,EAA6B;AAClC,WAAO,KAAK,KAAL,KAAe,SAAf,GAA2B,KAAK,KAAhC,GAAwC,IAA/C;AACD;AACD,SAAO,IAAP;AACD,CAdD;;;;;;;;kBAyBe,UAAC,QAAD;AAAA,SAAc,eAAe,+BAAQ,QAAR,CAAf,CAAd;AAAA,C","file":"schemaToObject.js","sourcesContent":["import { analyze } from './PropTypeAnalyzer';\n\n\n\n/**\n * Provides a primitive form of a schema node to use with\n * [Object.whitelist] and other schema-based utils.\n *\n * @param {Object} node: The PropTypes node to examine.\n * @return {Object}.\n */\nconst schemaToObject = (node) => {\n  if (node.type === 'shape') {\n    return node.properties.reduce((hash, entry) => {\n      hash[entry.name] = schemaToObject(entry);\n      return hash;\n    }, {});\n\n  } else if (node.type === 'arrayOf') {\n    return [schemaToObject(node.element)];\n\n  } else if (node.type === 'literal') {\n    return node.value !== undefined ? node.value : null;\n  }\n  return null;\n};\n\n\n\n\n\n/**\n * Converts the given schema node to a simple object.\n * @param {Object} rootNode: The PropTypes node to examine.\n * @return {Object}.\n */\nexport default (rootNode) => schemaToObject(analyze(rootNode));\n"]}
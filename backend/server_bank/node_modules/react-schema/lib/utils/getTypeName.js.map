{"version":3,"sources":["../../src/utils/getTypeName.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;;;;;AAaA,IAAM,cAAc,SAAd,WAAc,CAAC,OAAD,EAAa;AAC/B,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,SAAP;AACD,GAFD,MAEO,IAAI,QAAQ,KAAZ,EAAmB;AACxB,WAAO,QAAQ,KAAR,CAAc,IAArB,C;AACD;AACD,MAAI,iBAAJ;;;AAGA,SAAO,IAAP,CAAY,gBAAM,SAAlB,EAA6B,IAA7B,CAAkC,eAAO;AACvC,QACG,gBAAM,SAAN,CAAgB,GAAhB,MAAyB,OAA1B,IACC,gBAAM,SAAN,CAAgB,GAAhB,KAAwB,gBAAM,SAAN,CAAgB,GAAhB,EAAqB,UAArB,KAAoC,OAD7D,IAEC,oBAAU,GAAV,MAAmB,OAFpB,IAGC,oBAAU,GAAV,KAAkB,oBAAU,GAAV,EAAe,UAAf,KAA8B,OAJnD,EAKE;AACA,iBAAW,GAAX;AACA,aAAO,IAAP;AACD;AACD,WAAO,SAAP;AACD,GAXD;;;AAcA,SAAO,QAAP;AACD,CAxBD;;kBA6Be,W","file":"getTypeName.js","sourcesContent":["import React from 'react';\nimport PropTypes from '../PropTypes';\n\n\n\n/**\n * Attempts to locate (or infer) the PropType name from a checker.\n *\n * @param {Function} checker\n *        This could either be an instance of a chainable type checker (like\n *        oneOf and shape) or a primitive type checker (string or number).\n *\n * @return {String}\n */\nconst getTypeName = (checker) => {\n  if (!checker) {\n    return undefined;\n  } else if (checker.$meta) {\n    return checker.$meta.type; // An introspectable checker.\n  }\n  let typeName;\n\n  // Maybe this is a primitive checker?\n  Object.keys(React.PropTypes).some(key => {\n    if (\n      (React.PropTypes[key] === checker) ||\n      (React.PropTypes[key] && React.PropTypes[key].isRequired === checker) ||\n      (PropTypes[key] === checker) ||\n      (PropTypes[key] && PropTypes[key].isRequired === checker)\n    ) {\n      typeName = key;\n      return true;\n    }\n    return undefined;\n  });\n\n  // Finish up.\n  return typeName;\n};\n\n\n\n\nexport default getTypeName;\n"]}
{"version":3,"sources":["../../src/utils/createIntrospectableChecker.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAoBA,OAAO,OAAP,GAAiB,SAAS,2BAAT,CAAqC,IAArC,EAA2C,aAA3C,EAA0D;AACzE,SAAO,SAAS,0BAAT,CAAoC,IAApC,EAA0C;AAC/C,QAAM,UAAU,cAAc,IAAd,CAAhB;AACA,QAAM,QAAQ,EAAE,UAAF,EAAQ,UAAR,EAAd;;AAEA,QAAI,EAAE,mBAAmB,QAArB,CAAJ,EAAoC;AAClC,YAAM,IAAI,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,YAAQ,KAAR,GAAgB,KAAhB;AACA,YAAQ,UAAR,CAAmB,KAAnB,GAA2B,KAA3B;;AAEA,WAAO,OAAP;AACD,GAZD;AAaD,CAdD","file":"createIntrospectableChecker.js","sourcesContent":["/**\n * Decorates a **CHAINABLE** type checker's output to include the argument it\n * was instantiated with. For example:\n *\n *     shape({ something: string })\n *           ^^^^^^^^^^^^^^^^^^^^^\n *\n *     oneOf([ 'foo', 'bar' ])\n *           ^^^^^^^^^^^^^^^^\n *\n * The decorated checker will contain this information in a $meta property:\n *\n *     {\n *       type: String,\n *       args: Any\n *     }\n *\n * @param {String} type\n * @param {Function} sourceChecker\n */\nmodule.exports = function createIntrospectableChecker(type, sourceChecker) {\n  return function applyCheckerAndAddTypeInfo(args) {\n    const checker = sourceChecker(args);\n    const $meta = { type, args };\n\n    if (!(checker instanceof Function)) {\n      throw new Error('You may only decorate chainable, non-primitive type checkers!');\n    }\n\n    checker.$meta = $meta;\n    checker.isRequired.$meta = $meta;\n\n    return checker;\n  };\n};\n"]}
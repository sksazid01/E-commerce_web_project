{"version":3,"sources":["../src/PropTypeAnalyzer.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAM,YAAY,EAAlB;;AAGO,IAAM,0CAAiB,SAAjB,cAAiB,CAAC,IAAD,EAAO,QAAP,EAAoB;AAChD,YAAU,IAAV,IAAkB,QAAlB;AACD,CAFM;;AAIA,IAAM,4BAAU,SAAV,OAAU,CAAC,OAAD,EAAa;AAClC,MAAI,iBAAJ;;AAEA,MAAI,WAAW,QAAQ,KAAvB,EAA8B;AAC5B,QAAM,WAAW,UAAU,QAAQ,KAAR,CAAc,IAAxB,CAAjB;;AAEA,QAAI,QAAJ,EAAc;AACZ,iBAAW,qBAAM,SAAS,QAAQ,KAAR,CAAc,IAAvB,CAAN,CAAX;AACD;AACF;;AAED,MAAI,CAAC,QAAL,EAAe;AACb,eAAW,EAAE,MAAM,SAAR,EAAmB,OAAO,2BAAY,OAAZ,KAAwB,IAAlD,EAAX;AACD;;;;AAID,MAAI,OAAO,OAAP,KAAmB,UAAnB,IAAiC,CAAC,QAAQ,cAAR,CAAuB,YAAvB,CAAtC,EAA4E;AAC1E,aAAS,UAAT,GAAsB,IAAtB;AACD;;AAED,SAAO,QAAP;AACD,CAtBM;;AA4BP,eAAe,OAAf,EAAwB,sBAAc;AACpC,MAAM,WAAW,EAAjB;AACA,WAAS,IAAT,GAAgB,OAAhB;AACA,WAAS,UAAT,GAAsB,OAAO,IAAP,CAAY,UAAZ,EAAwB,GAAxB,CAA4B,eAAO;AACvD,QAAM,WAAW,qBAAM,QAAQ,WAAW,GAAX,CAAR,CAAN,CAAjB;AACA,aAAS,IAAT,GAAgB,GAAhB;AACA,WAAO,QAAP;AACD,GAJqB,CAAtB;AAKA,SAAO,QAAP;AACD,CATD;;AAYA,eAAe,SAAf,EAA0B,mBAAW;AACnC,MAAM,WAAW,EAAjB;AACA,WAAS,IAAT,GAAgB,SAAhB;AACA,WAAS,OAAT,GAAmB,QAAQ,OAAR,CAAnB;AACA,SAAO,QAAP;AACD,CALD;;AAQA,eAAe,WAAf,EAA4B,iBAAS;AACnC,MAAM,WAAW,EAAjB;AACA,WAAS,IAAT,GAAgB,WAAhB;AACA,WAAS,KAAT,GAAiB,MAAM,GAAN,CAAU,OAAV,CAAjB;AACA,SAAO,QAAP;AACD,CALD","file":"PropTypeAnalyzer.js","sourcesContent":["import getTypeName from './utils/getTypeName';\nimport clone from './utils/clone';\nconst analyzers = {};\n\n\nexport const defineAnalyzer = (type, analyzer) => {\n  analyzers[type] = analyzer;\n};\n\nexport const analyze = (checker) => {\n  let nodeInfo;\n\n  if (checker && checker.$meta) {\n    const analyzer = analyzers[checker.$meta.type];\n\n    if (analyzer) {\n      nodeInfo = clone(analyzer(checker.$meta.args));\n    }\n  }\n\n  if (!nodeInfo) {\n    nodeInfo = { type: 'literal', value: getTypeName(checker) || null };\n  }\n\n  // We can infer whether `isRequired` was used by checking if the generated\n  // checker still has this property or not.\n  if (typeof checker === 'function' && !checker.hasOwnProperty('isRequired')) {\n    nodeInfo.isRequired = true;\n  }\n\n  return nodeInfo;\n};\n\n\n\n\n\ndefineAnalyzer('shape', properties => {\n  const nodeInfo = {};\n  nodeInfo.type = 'shape';\n  nodeInfo.properties = Object.keys(properties).map(key => {\n    const childAST = clone(analyze(properties[key]));\n    childAST.name = key;\n    return childAST;\n  });\n  return nodeInfo;\n});\n\n\ndefineAnalyzer('arrayOf', element => {\n  const nodeInfo = {};\n  nodeInfo.type = 'arrayOf';\n  nodeInfo.element = analyze(element);\n  return nodeInfo;\n});\n\n\ndefineAnalyzer('oneOfType', types => {\n  const nodeInfo = {};\n  nodeInfo.type = 'oneOfType';\n  nodeInfo.types = types.map(analyze);\n  return nodeInfo;\n});\n"]}
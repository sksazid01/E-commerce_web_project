{"version":3,"sources":["../src/load-css.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;IAAY,I;;;;;;;;;;;;kBAQG,UAAC,KAAD,EAAW;AACxB,MAAI,CAAC,gBAAE,EAAF,CAAK,KAAL,EAAY,KAAZ,CAAL,EAAyB;AAAE,YAAQ,CAAC,KAAD,CAAR;AAAkB;AAC7C,UAAQ,gBAAE,MAAF,CAAS;AAAA,WAAQ,KAAK,QAAL,CAAc,MAAd,CAAR;AAAA,GAAT,EAAwC,KAAxC,CAAR;;AAEA,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,SAAK,YAAL,CAAkB,KAAlB,EAAyB,UAAC,IAAD,EAAO,IAAP,EAAgB;AACvC,WAAK,IAAL,EAAW,EAAE,MAAM,KAAK,IAAb,EAAmB,KAAK,KAAK,IAA7B,EAAX;AACD,KAFD,EAGC,IAHD,CAGM;AAAA,aAAU,QAAQ,MAAR,CAAV;AAAA,KAHN,EAIC,KAJD,CAIO;AAAA,aAAO,OAAO,GAAP,CAAP;AAAA,KAJP;AAKD,GANM,CAAP;AAOD,C","file":"load-css.js","sourcesContent":["import R from 'ramda';\nimport * as util from './util';\n\n\n/**\n * Retrieves the set of plain CSS files.\n * @param {array} paths: An array of paths to the source [.styl] files.\n * @return {promise}.\n */\nexport default (paths) => {\n  if (!R.is(Array, paths)) { paths = [paths]; }\n  paths = R.filter(path => path.endsWith('.css'), paths);\n\n  return new Promise((resolve, reject) => {\n    util.processFiles(paths, (args, done) => {\n      done(null, { path: args.path, css: args.file });\n    })\n    .then(result => resolve(result))\n    .catch(err => reject(err));\n  });\n};\n"]}
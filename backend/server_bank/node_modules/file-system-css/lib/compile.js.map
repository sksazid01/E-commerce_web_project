{"version":3,"sources":["../src/compile.js"],"names":[],"mappings":"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","file":"compile.js","sourcesContent":["import R from 'ramda';\nimport stylusCompiler from './compile-stylus';\nimport loadCss from './load-css';\n\n\n\nconst merge = (sourceFiles, targetFiles) =>\n  targetFiles.map(item => {\n    const index = R.findIndex(m => m.path === item.path, sourceFiles);\n    if (index > -1) {\n      item.css = sourceFiles[index].css;\n    }\n    return item;\n  });\n\n\nconst concatenate = (files) => {\n  const css = R.pipe(R.map(R.prop('css')), R.reject(R.isNil));\n  const append = (result, file) => result += `\\n\\n\\n${ file }`;\n  return R.reduce(append, '', css(files));\n};\n\n\nconst saveToDisk = (fileCache, files) => {\n  const toPayload = R.map(item => ({\n    key: item.path,\n    value: { path: item.path, css: item.css },\n  }));\n  return fileCache.save(toPayload(files));\n};\n\n\n\n\nexport default (fileCache, paths) => {\n  let files;\n  let compiledFiles;\n\n  return new Promise((resolve, reject) => {\n    // Read in any existing items from cache.\n    //  - store the cached CSS on the return object.\n    //  - remove that existing item from the list to compile.\n    fileCache\n      .load()\n      .then(cached => {\n\n        const cachedFiles = R.filter(item => item.value)(cached.files);\n        const cachedPaths = R.map(item => item.value.path)(cachedFiles);\n        const isCached = (path) => R.contains(path)(cachedPaths);\n        const cachedFile = (path) => R.find(item => item.value.path === path)(cachedFiles);\n        const uncachedPaths = R.reject(isCached, paths);\n\n        // Create the return array.\n        //  - populate with any CSS that already exists in the cache.\n        files = paths.map(path => {\n          const fromCache = cachedFile(path);\n          const css = fromCache ? fromCache.value.css : undefined;\n          return { path, css };\n        });\n\n\n        // Compile stylus.\n        stylusCompiler.compile(uncachedPaths)\n          .then(result => compiledFiles = result)\n          .catch(err => reject(err))\n\n          // Merge the compiled files into the result set.\n          .then(() => files = merge(compiledFiles, files))\n\n          // Cache CSS to disk.\n          .then(() => saveToDisk(fileCache, compiledFiles))\n\n          // Add raw CSS files (.css)\n          .then(() => {\n            loadCss(paths)\n              .then(result => files = merge(result, files))\n              .then(() => { // Concatenate into final result.\n                try {\n                  resolve({ files, css: concatenate(files) });\n                } catch (e) { reject(e); }\n              });\n          }).catch(err => reject(err));\n      });\n  });\n};\n"]}
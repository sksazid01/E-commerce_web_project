{"version":3,"sources":["../src/fs-watch.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAM,YAAY,EAAlB;AACA,IAAM,QAAQ,SAAR,KAAQ,CAAC,IAAD;AAAA,SAAU,gBAAE,GAAF,CAAM;AAAA,WAAO,KAAK,QAAL,CAAc,GAAd,CAAP;AAAA,GAAN,oBAAV;AAAA,CAAd;;AAEA,IAAM,iBAAiB,SAAjB,cAAiB,CAAC,IAAD,EAAU;AAC/B,MAAM,UAAU,SAAV,OAAU,CAAC,IAAD;AAAA,WAAU,gBAAE,QAAF,CAAW,IAAX,EAAiB,KAAK,KAAtB,CAAV;AAAA,GAAhB;AACA,SAAO,gBAAE,IAAF,CACL,gBAAE,MAAF,CAAS,OAAT,CADK,EAEL,gBAAE,GAAF,CAAM,gBAAE,IAAF,CAAO,WAAP,CAAN,CAFK,EAGL,SAHK,CAAP;AAID,CAND;;AASA,IAAM,mBAAmB,SAAnB,gBAAmB,CAAC,IAAD,EAAU;AACjC,iBAAe,IAAf,EAAqB,OAArB,CAA6B,iBAAS;AACpC,QAAI,mBAAQ,IAAR,CAAJ,EAAmB;;;AAGjB,YAAM,KAAN;AACD,KAJD,MAIO;;AAEL,YAAM,MAAN,CAAa,IAAb;AACD;AACF,GATD;;;AAYA,kBAAY,KAAZ;AACD,CAdD;;AAkBA,IAAI,aAAa,KAAjB;AACA,IAAM,gBAAgB,SAAhB,aAAgB,GAAM;AAC1B,MAAI,UAAJ,EAAgB;AAAE;AAAS;AAC3B,eAAa,IAAb;AACA,qBAAS,KAAT,CAAe,GAAf,EAAoB,EAAE,SAAS,UAAX,EAApB,EACG,EADH,CACM,QADN,EACgB,gBAAQ;AACpB,QAAI,MAAM,IAAN,CAAJ,EAAiB;AACf,uBAAiB,eAAO,OAAP,CAAe,IAAf,CAAjB;AACD;AACF,GALH;AAMD,CATD;;kBAae,UAAC,SAAD,EAAY,KAAZ,EAAsB;;AAEnC,YAAU,IAAV,CAAe,EAAE,oBAAF,EAAa,YAAb,EAAf;AACA;AACD,C","file":"fs-watch.js","sourcesContent":["import R from 'ramda';\nimport fsPath from 'path';\nimport chokidar from 'chokidar';\nimport memoryCache from './cache';\nimport { isMixin } from './util';\nimport { EXTENSIONS } from './const';\n\nconst COMPILERS = [];\nconst isCss = (path) => R.any(ext => path.endsWith(ext))(EXTENSIONS);\n\nconst cachesFromPath = (path) => {\n  const isMatch = (item) => R.contains(path, item.files);\n  return R.pipe(\n    R.filter(isMatch),\n    R.map(R.prop('fileCache'))\n  )(COMPILERS);\n};\n\n\nconst onCssFileChanged = (path) => {\n  cachesFromPath(path).forEach(cache => {\n    if (isMixin(path)) {\n      // Mixins effect multiple files,\n      // clear the entire set of cached files.\n      cache.clear();\n    } else {\n      // Delete the single file.\n      cache.remove(path);\n    }\n  });\n\n  // Clear the memory cache.\n  memoryCache.clear();\n};\n\n\n\nlet isWatching = false;\nconst startWatching = () => {\n  if (isWatching) { return; }\n  isWatching = true;\n  chokidar.watch('.', { ignored: /[\\/\\\\]\\./ })\n    .on('change', path => {\n      if (isCss(path)) {\n        onCssFileChanged(fsPath.resolve(path));\n      }\n    });\n};\n\n\n\nexport default (fileCache, files) => {\n  // Store reference to the compiler settings.\n  COMPILERS.push({ fileCache, files });\n  startWatching();\n};\n"]}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chokidar = require('chokidar');

var _chokidar2 = _interopRequireDefault(_chokidar);

var _cache = require('./cache');

var _cache2 = _interopRequireDefault(_cache);

var _util = require('./util');

var _const = require('./const');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMPILERS = [];
var isCss = function isCss(path) {
  return _ramda2.default.any(function (ext) {
    return path.endsWith(ext);
  })(_const.EXTENSIONS);
};

var cachesFromPath = function cachesFromPath(path) {
  var isMatch = function isMatch(item) {
    return _ramda2.default.contains(path, item.files);
  };
  return _ramda2.default.pipe(_ramda2.default.filter(isMatch), _ramda2.default.map(_ramda2.default.prop('fileCache')))(COMPILERS);
};

var onCssFileChanged = function onCssFileChanged(path) {
  cachesFromPath(path).forEach(function (cache) {
    if ((0, _util.isMixin)(path)) {
      // Mixins effect multiple files,
      // clear the entire set of cached files.
      cache.clear();
    } else {
      // Delete the single file.
      cache.remove(path);
    }
  });

  // Clear the memory cache.
  _cache2.default.clear();
};

var isWatching = false;
var startWatching = function startWatching() {
  if (isWatching) {
    return;
  }
  isWatching = true;
  _chokidar2.default.watch('.', { ignored: /[\/\\]\./ }).on('change', function (path) {
    if (isCss(path)) {
      onCssFileChanged(_path2.default.resolve(path));
    }
  });
};

exports.default = function (fileCache, files) {
  // Store reference to the compiler settings.
  COMPILERS.push({ fileCache: fileCache, files: files });
  startWatching();
};
//# sourceMappingURL=fs-watch.js.map
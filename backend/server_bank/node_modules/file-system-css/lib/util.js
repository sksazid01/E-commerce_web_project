'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processFiles = exports.hash = exports.readFileSync = exports.childPaths = exports.isDirectory = exports.isMixin = undefined;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isMixin = exports.isMixin = function isMixin(path) {
  var name = _path2.default.basename(path, '.styl');
  if (name === 'mixin') {
    return true;
  }
  if (name.endsWith('.mixin')) {
    return true;
  }
  return false;
};

var isDirectory = exports.isDirectory = function isDirectory(path) {
  return _fsExtra2.default.lstatSync(path).isDirectory();
};

var childPaths = exports.childPaths = function childPaths(dir) {
  var result = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  if (!isDirectory(dir)) {
    result.push(dir);
    return result;
  }
  _fsExtra2.default.readdirSync(dir).forEach(function (file) {
    var path = _path2.default.join(dir, file);
    if (isDirectory(path)) {
      childPaths(path, result); // <== RECURSION.
    } else {
        result.push(path);
      }
  });
  return result;
};

var readFileSync = exports.readFileSync = function readFileSync(path) {
  if (_fsExtra2.default.existsSync(path)) {
    return _fsExtra2.default.readFileSync(path).toString();
  }
};

var hash = exports.hash = function hash() {
  for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
    paths[_key] = arguments[_key];
  }

  paths = _ramda2.default.pipe(_ramda2.default.flatten, _ramda2.default.reject(_ramda2.default.isNil))(paths);
  var md5 = _crypto2.default.createHash('md5');
  paths.forEach(function (path) {
    return md5.update(path);
  });
  return md5.digest('hex');
};

var processFiles = exports.processFiles = function processFiles(paths, handler) {
  if (!_ramda2.default.is(Array, paths)) {
    paths = [paths];
  }

  return new Promise(function (resolve, reject) {
    var result = [];
    var completed = 0;
    var isDone = false;

    var done = function done(err, item) {
      if (isDone) {
        return;
      }
      if (err) {
        // Failed.
        reject(err);isDone = true;
      } else {
        // Success.
        result.push(item);
        completed += 1;
        if (completed === paths.length) {
          // All files have been processed.
          resolve(result);
          isDone = true;
        }
      }
    };

    if (paths.length === 0) {
      resolve(result);
    } else {
      // Process each file
      paths.forEach(function (path) {
        var file = readFileSync(path);
        handler({ path: path, file: file }, done);
      });
    }
  });
};
//# sourceMappingURL=util.js.map
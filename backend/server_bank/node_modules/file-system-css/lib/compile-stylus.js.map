{"version":3,"sources":["../src/compile-stylus.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;IAAY,I;;;;;;AAGZ,IAAM,eAAe,SAAf,YAAe,CAAC,UAAD,EAAa,IAAb,EAAmB,MAAnB,EAA2B,QAA3B,EAAwC;AAC3D,MAAM,WAAW,sBAAO,UAAP,EACd,GADc,CACV,UADU,EACE,IADF,EAEd,GAFc,CAEV,oBAFU,EAGd,MAHc,CAGP,KAHO,CAAjB;AAIA,SAAO,OAAP,CAAe;AAAA,WAAK,SAAS,MAAT,CAAgB,CAAhB,CAAL;AAAA,GAAf;AACA,WAAS,MAAT,CAAgB,QAAhB;AACD,CAPD;;;;;;;AAgBA,IAAM,UAAU,SAAV,OAAU,CAAC,KAAD,EAAW;AACzB,MAAI,CAAC,gBAAE,EAAF,CAAK,KAAL,EAAY,KAAZ,CAAL,EAAyB;AAAE,YAAQ,CAAC,KAAD,CAAR;AAAkB;AAC7C,UAAQ,gBAAE,MAAF,CAAS;AAAA,WAAQ,KAAK,QAAL,CAAc,OAAd,CAAR;AAAA,GAAT,EAAyC,KAAzC,CAAR;;;AAGA,MAAM,aAAa,gBAAE,MAAF,CAAS,KAAK,OAAd,EAAuB,KAAvB,CAAnB;AACA,MAAM,cAAc,gBAAE,MAAF,CAAS;AAAA,WAAQ,CAAC,KAAK,OAAL,CAAa,IAAb,CAAT;AAAA,GAAT,EAAsC,KAAtC,CAApB;;;AAGA,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,SAAK,YAAL,CAAkB,WAAlB,EAA+B,UAAC,IAAD,EAAO,IAAP,EAAgB;AAAA,UACrC,IADqC,GACtB,IADsB,CACrC,IADqC;AAAA,UAC/B,IAD+B,GACtB,IADsB,CAC/B,IAD+B;;AAE7C,mBAAa,IAAb,EAAmB,IAAnB,EAAyB,UAAzB,EAAqC,UAAC,GAAD,EAAM,GAAN;AAAA,eAAc,KAAK,GAAL,EAAU,EAAE,UAAF,EAAQ,QAAR,EAAV,CAAd;AAAA,OAArC;AACD,KAHD,EAIC,IAJD,CAIM;AAAA,aAAU,QAAQ,MAAR,CAAV;AAAA,KAJN,EAKC,KALD,CAKO;AAAA,aAAO,OAAO,GAAP,CAAP;AAAA,KALP;AAMD,GAPM,CAAP;AAQD,CAjBD;;kBAqBe,EAAE,gBAAF,E","file":"compile-stylus.js","sourcesContent":["import R from 'ramda';\nimport stylus from 'stylus';\nimport nib from 'nib';\nimport * as util from './util';\n\n\nconst compileToCss = (stylusText, path, mixins, callback) => {\n  const compiler = stylus(stylusText)\n    .set('filename', path)\n    .use(nib())\n    .import('nib');\n  mixins.forEach(p => compiler.import(p));\n  compiler.render(callback);\n};\n\n\n\n/**\n * Converts the given stylus paths to CSS.\n * @param {array} paths: An array of paths to the source [.styl] files.\n * @return {promise}.\n */\nconst compile = (paths) => {\n  if (!R.is(Array, paths)) { paths = [paths]; }\n  paths = R.filter(path => path.endsWith('.styl'), paths);\n\n  // Seperate the mixin files.\n  const mixinPaths = R.filter(util.isMixin, paths);\n  const stylusPaths = R.filter(path => !util.isMixin(path), paths);\n\n  // Compile Stylus => CSS.\n  return new Promise((resolve, reject) => {\n    util.processFiles(stylusPaths, (args, done) => {\n      const { file, path } = args;\n      compileToCss(file, path, mixinPaths, (err, css) => done(err, { path, css }));\n    })\n    .then(result => resolve(result))\n    .catch(err => reject(err));\n  });\n};\n\n\n\nexport default { compile };\n"]}
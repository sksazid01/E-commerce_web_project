{"version":3,"sources":["../src/util.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGO,IAAM,4BAAU,SAAV,OAAU,CAAC,IAAD,EAAU;AAC/B,MAAM,OAAO,eAAO,QAAP,CAAgB,IAAhB,EAAsB,OAAtB,CAAb;AACA,MAAI,SAAS,OAAb,EAAsB;AAAE,WAAO,IAAP;AAAc;AACtC,MAAI,KAAK,QAAL,CAAc,QAAd,CAAJ,EAA6B;AAAE,WAAO,IAAP;AAAc;AAC7C,SAAO,KAAP;AACD,CALM;;AAUA,IAAM,oCAAc,SAAd,WAAc,CAAC,IAAD;AAAA,SAAU,kBAAG,SAAH,CAAa,IAAb,EAAmB,WAAnB,EAAV;AAAA,CAApB;;AAGA,IAAM,kCAAa,SAAb,UAAa,CAAC,GAAD,EAAsB;AAAA,MAAhB,MAAgB,yDAAP,EAAO;;AAC9C,MAAI,CAAC,YAAY,GAAZ,CAAL,EAAuB;AACrB,WAAO,IAAP,CAAY,GAAZ;AACA,WAAO,MAAP;AACD;AACD,oBAAG,WAAH,CAAe,GAAf,EAAoB,OAApB,CAA4B,gBAAQ;AAClC,QAAM,OAAO,eAAO,IAAP,CAAY,GAAZ,EAAiB,IAAjB,CAAb;AACA,QAAI,YAAY,IAAZ,CAAJ,EAAuB;AACrB,iBAAW,IAAX,EAAiB,MAAjB,E;AACD,KAFD,MAEO;AACL,eAAO,IAAP,CAAY,IAAZ;AACD;AACF,GAPD;AAQA,SAAO,MAAP;AACD,CAdM;;AAkBA,IAAM,sCAAe,SAAf,YAAe,CAAC,IAAD,EAAU;AACpC,MAAI,kBAAG,UAAH,CAAc,IAAd,CAAJ,EAAyB;AACvB,WAAO,kBAAG,YAAH,CAAgB,IAAhB,EAAsB,QAAtB,EAAP;AACD;AACF,CAJM;;AAQA,IAAM,sBAAO,SAAP,IAAO,GAAc;AAAA,oCAAV,KAAU;AAAV,SAAU;AAAA;;AAChC,UAAQ,gBAAE,IAAF,CAAO,gBAAE,OAAT,EAAkB,gBAAE,MAAF,CAAS,gBAAE,KAAX,CAAlB,EAAqC,KAArC,CAAR;AACA,MAAM,MAAM,iBAAO,UAAP,CAAkB,KAAlB,CAAZ;AACA,QAAM,OAAN,CAAc;AAAA,WAAQ,IAAI,MAAJ,CAAW,IAAX,CAAR;AAAA,GAAd;AACA,SAAO,IAAI,MAAJ,CAAW,KAAX,CAAP;AACD,CALM;;AAUA,IAAM,sCAAe,SAAf,YAAe,CAAC,KAAD,EAAQ,OAAR,EAAoB;AAC9C,MAAI,CAAC,gBAAE,EAAF,CAAK,KAAL,EAAY,KAAZ,CAAL,EAAyB;AAAE,YAAQ,CAAC,KAAD,CAAR;AAAkB;;AAE7C,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAM,SAAS,EAAf;AACA,QAAI,YAAY,CAAhB;AACA,QAAI,SAAS,KAAb;;AAEA,QAAM,OAAO,SAAP,IAAO,CAAC,GAAD,EAAM,IAAN,EAAe;AAC1B,UAAI,MAAJ,EAAY;AAAE;AAAS;AACvB,UAAI,GAAJ,EAAS;;AAEP,eAAO,GAAP,EAAa,SAAS,IAAT;AACd,OAHD,MAGO;;AAEL,eAAO,IAAP,CAAY,IAAZ;AACA,qBAAa,CAAb;AACA,YAAI,cAAc,MAAM,MAAxB,EAAgC;;AAE9B,kBAAQ,MAAR;AACA,mBAAS,IAAT;AACD;AACF;AACF,KAfD;;AAiBA,QAAI,MAAM,MAAN,KAAiB,CAArB,EAAwB;AACtB,cAAQ,MAAR;AACD,KAFD,MAEO;;AAEL,YAAM,OAAN,CAAc,gBAAQ;AACpB,YAAM,OAAO,aAAa,IAAb,CAAb;AACA,gBAAQ,EAAE,UAAF,EAAQ,UAAR,EAAR,EAAwB,IAAxB;AACD,OAHD;AAID;AACF,GA/BM,CAAP;AAgCD,CAnCM","file":"util.js","sourcesContent":["import R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport crypto from 'crypto';\n\n\nexport const isMixin = (path) => {\n  const name = fsPath.basename(path, '.styl');\n  if (name === 'mixin') { return true; }\n  if (name.endsWith('.mixin')) { return true; }\n  return false;\n};\n\n\n\n\nexport const isDirectory = (path) => fs.lstatSync(path).isDirectory();\n\n\nexport const childPaths = (dir, result = []) => {\n  if (!isDirectory(dir)) {\n    result.push(dir);\n    return result;\n  }\n  fs.readdirSync(dir).forEach(file => {\n    const path = fsPath.join(dir, file);\n    if (isDirectory(path)) {\n      childPaths(path, result); // <== RECURSION.\n    } else {\n      result.push(path);\n    }\n  });\n  return result;\n};\n\n\n\nexport const readFileSync = (path) => {\n  if (fs.existsSync(path)) {\n    return fs.readFileSync(path).toString();\n  }\n};\n\n\n\nexport const hash = (...paths) => {\n  paths = R.pipe(R.flatten, R.reject(R.isNil))(paths);\n  const md5 = crypto.createHash('md5');\n  paths.forEach(path => md5.update(path));\n  return md5.digest('hex');\n};\n\n\n\n\nexport const processFiles = (paths, handler) => {\n  if (!R.is(Array, paths)) { paths = [paths]; }\n\n  return new Promise((resolve, reject) => {\n    const result = [];\n    let completed = 0;\n    let isDone = false;\n\n    const done = (err, item) => {\n      if (isDone) { return; }\n      if (err) {\n        // Failed.\n        reject(err); isDone = true;\n      } else {\n        // Success.\n        result.push(item);\n        completed += 1;\n        if (completed === paths.length) {\n          // All files have been processed.\n          resolve(result);\n          isDone = true;\n        }\n      }\n    };\n\n    if (paths.length === 0) {\n      resolve(result);\n    } else {\n      // Process each file\n      paths.forEach(path => {\n        const file = readFileSync(path);\n        handler({ path, file }, done);\n      });\n    }\n  });\n};\n"]}
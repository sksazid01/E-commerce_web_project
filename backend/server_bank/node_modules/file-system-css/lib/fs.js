"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _crypto = require("crypto");

var _crypto2 = _interopRequireDefault(_crypto);

var isDirectory = function isDirectory(path) {
  return _fsExtra2["default"].lstatSync(path).isDirectory();
};

exports.isDirectory = isDirectory;
var childPaths = function childPaths(dir) {
  var result = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

  if (!isDirectory(dir)) {
    result.push(dir);
    return result;
  }
  _fsExtra2["default"].readdirSync(dir).forEach(function (file) {
    var path = _path2["default"].join(dir, file);
    if (isDirectory(path)) {
      childPaths(path, result); // <== RECURSION.
    } else {
        result.push(path);
      }
  });
  return result;
};

exports.childPaths = childPaths;
var readFileSync = function readFileSync(path) {
  if (_fsExtra2["default"].existsSync(path)) {
    return _fsExtra2["default"].readFileSync(path).toString();
  }
};

exports.readFileSync = readFileSync;
var hash = function hash() {
  for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
    paths[_key] = arguments[_key];
  }

  paths = _lodash2["default"].chain(paths).flatten(paths, true).compact().value();
  var hash = _crypto2["default"].createHash("md5");
  paths.forEach(function (path) {
    return hash.update(path);
  });
  return hash.digest("hex");
};

exports.hash = hash;
var processFiles = function processFiles(paths, handler) {
  if (!_lodash2["default"].isArray(paths)) {
    paths = [paths];
  }

  return new Promise(function (resolve, reject) {
    var result = [];
    var completed = 0;
    var isDone = false;

    var done = function done(err, item) {
      if (isDone) {
        return;
      }
      if (err) {
        // Failed.
        reject(err);isDone = true;
      } else {
        // Success.
        result.push(item);
        completed += 1;
        if (completed === paths.length) {
          // All files have been processed.
          resolve(result);
          isDone = true;
        }
      }
    };

    if (paths.length === 0) {
      resolve(result);
    } else {
      // Process each file
      paths.forEach(function (path) {
        var file = readFileSync(path);
        handler({ path: path, file: file }, done);
      });
    }
  });
};
exports.processFiles = processFiles;
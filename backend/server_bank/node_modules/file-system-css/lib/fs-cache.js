"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("./fs");

var fsLocal = _interopRequireWildcard(_fs);

var BUILD_PATH = _path2["default"].join(__dirname, "../.build");
_fsExtra2["default"].ensureDirSync(BUILD_PATH);

var _remove = function _remove(buildPath) {
  return _fsExtra2["default"].removeSync(buildPath);
};

/**
 * Handles caching of CSS to the file-system.
 *    This allows for start-up times, which is especially
 *    useful when developing.
 */
exports["default"] = {
  /**
   * Gets the item from the file-system.
   * @param {array|string} ns: A unique string/array to group the files by.
   */
  get: function get(ns, path) {
    var buildPath = fsLocal.buildPath(ns, path);
    return fsLocal.readFileSync(buildPath);
  },

  /**
   * Saves CSS to a file.
   * @param {array|string} ns: A unique string/array to group the files by.
   * @param path: The path of the source file.
   * @param css:  The compiled CSS.
   */
  set: function set(ns, path, css) {
    var buildPath = fsLocal.buildPath(ns, path);
    _fsExtra2["default"].outputFileSync(buildPath, css);
  },

  /**
   * Removes the specified item from the file-system.
   * @param {array|string} ns: A unique string/array to group the files by.
   * @param path: The path of the source file.
   */
  remove: function remove(ns, path) {
    _remove(fsLocal.buildPath(ns, path));
  },

  /**
   * Deletes all files stored in the [.build] file-system.
   */
  clear: function clear() {
    fsLocal.childPaths(BUILD_PATH).forEach(function (path) {
      return _remove(path);
    });
  },

  /**
   * Loads all given files into the file-system.
   * @param {array|string} ns: A unique string/array to group the files by.
   * @param {array} paths: The source file paths to load.
   * @return {array} of the paths that were loaded from the file-system.
   */
  load: function load(ns) {
    var _this = this;

    for (var _len = arguments.length, paths = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      paths[_key - 1] = arguments[_key];
    }

    return _lodash2["default"].chain(paths).flatten().map(function (path) {
      return _this.get(ns, path) ? path : null;
    }).compact().value();
  },

  /**
   * Saves the given items to the cache.
   * @param {array|string} ns: A unique string/array to group the files by.
   * @param {array} items: The { path, css } items to save.
   * @return {array} of items.
   */
  save: function save(ns) {
    var _this2 = this;

    for (var _len2 = arguments.length, items = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      items[_key2 - 1] = arguments[_key2];
    }

    return _lodash2["default"].chain(items).flatten().map(function (item) {
      _this2.set(ns, item.path, item.css); // Save to file.
      return item;
    }).value();
  }
};
module.exports = exports["default"];
{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport fsWatch from './fs-watch';\nimport * as util from './util';\nimport compile from './compile';\nimport cache from './cache';\nimport createFileSystemCache from 'file-system-cache';\nimport CleanCSS from 'clean-css';\nimport { EXTENSIONS } from './const';\n\nexport const CACHE_PATH = './.build/css';\n\nconst DEFAULTS = {\n  watch: false,         // Flag indicating if file-system watching is enabled.\n  minify: false,        // Flag indicating if the css should be minified.\n  cache: true,          // Flag indicating if caching should be employed.\n  pathsRequired: true,   // Flag indicating if an error should be thrown if the\n                        // given paths do not exist.\n};\n\nexport default {\n  defaults: DEFAULTS,\n\n  /**\n   * Clears the memory and file cache.\n   */\n  delete() {\n    fs.removeSync(fsPath.resolve(CACHE_PATH));\n    cache.clear();\n  },\n\n  /**\n   * Starts a compiler for the given path(s).\n   * @param {string|array} paths: The file-system paths to compile.\n   * @param {object} options.\n   * @return {Promise}\n   */\n  compile(paths, options = {}) {\n    // Setup initial conditions.\n    const cacheKey = cache.key(paths, options);\n    options.minify = options.minify || DEFAULTS.minify;\n    options.cache = R.isNil(options.cache) ? DEFAULTS.cache : options.cache;\n    options.watch = options.watch || DEFAULTS.watch;\n    options.pathsRequired = options.pathsRequired === undefined\n      ? DEFAULTS.pathsRequired\n      : options.pathsRequired;\n\n    // Check the cache.\n    if (options.cache === true) {\n      const css = cache.value(cacheKey);\n      if (css) {\n        // The value exists in the cache - return from here.\n        return new Promise(resolve => resolve({ css }));\n      }\n    }\n\n    // Prepare the paths.\n    if (!R.is(Array, paths)) { paths = R.reject(R.isNil, [paths]); }\n    if (paths.length === 0) { throw new Error(`File-system 'path' was not specified.`); }\n\n    paths = R.pipe(\n            R.flatten,\n            R.map(path => path && path.startsWith('.') ? fsPath.resolve(path) : path),\n            R.reject(R.isNil),\n            R.uniq\n    )(paths);\n\n    paths.forEach((path, i) => {\n      if (!fs.existsSync(path)) {\n        if (options.pathsRequired === true) {\n          throw new Error(`The CSS path '${ path }' does not exist.`);\n        } else {\n          paths[i] = null;\n        }\n      }\n    });\n    paths = R.reject(R.isNil, paths);\n\n    // Retrieve all CSS source files within the given folders.\n    paths.files = R.pipe(\n                  R.map(path => util.childPaths(path)),\n                  R.flatten,\n                  R.filter(path => R.contains(fsPath.extname(path), EXTENSIONS)),\n                  R.uniq\n    )(paths);\n\n    // Create the unique namespace for the compiler.\n    const fileCache = createFileSystemCache({\n      basePath: CACHE_PATH,\n      ns: paths.map(item => item),\n    });\n\n    // Watch the files if in development mode.\n    if (options.watch === true) {\n      fsWatch(fileCache, paths.files); // Start the file-system watcher.\n    }\n\n    // Construct the return promise.\n    const promise = new Promise((resolve, reject) => {\n      compile(fileCache, paths.files)\n      .then(result => {\n        if (options.minify === true) { result.css = new CleanCSS().minify(result.css).styles; }\n        if (options.cache === true) { cache.value(cacheKey, result.css); }\n        resolve(result);\n      })\n      .catch(err => reject(err));\n    });\n    promise.options = options;\n    promise.paths = paths;\n\n    // Finish up.\n    return promise;\n  },\n};\n"]}
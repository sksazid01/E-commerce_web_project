{"version":3,"sources":["../src/middleware.js"],"names":[],"mappings":"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","file":"middleware.js","sourcesContent":["/* eslint max-len:0 new-cap:0 */\n\nimport R from 'ramda';\nimport chalk from 'chalk';\nimport express from 'express';\nimport compression from 'compression';\nimport css from 'file-system-css';\nimport filesize from 'filesize';\nimport middlewarePaths from './paths';\nimport routerCss from './router-css';\nimport routerHtml from './router-html';\nimport routerJs from './router-js';\nimport webpackBuilder from './webpack-builder';\nimport templatesFiles from './templates';\nimport log from './log';\n\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\n\n\nconst buildFunction = (middleware, paths, routes, loaders) => {\n  let builtResponse;\n  return (options = {}) => new Promise((resolve, reject) => {\n    if (builtResponse && options.force !== true) {\n      // Don't rebuild if compilation has already occured.\n      resolve(builtResponse);\n    } else {\n      webpackBuilder({ paths, routes, loaders })\n      .then(result => {\n        builtResponse = result;\n        resolve(result);\n      })\n      .catch(err => {\n        // Failed to build.\n        if (err.errors) {\n          log.error(chalk.red('FAILED to compile javascript.\\n'));\n          err.errors.forEach(error => log.error(error.message));\n        }\n        reject(err);\n      });\n    }\n  });\n};\n\n\n\n\n/**\n * Returns the server middleware.\n *\n * @param options:\n *            - base:           The relative or absolute path to the base for all other relative paths.\n *            - css:            The relative or absolute path to the global CSS folder.\n *            - public:         The relative or absolute path to the public assets folder.\n *            - layouts:        The relative or absolute path to the page layouts folder.\n *            - components:     The relative or absolute path to the shared components folder.\n *            - pages:          The relative or absolute path to the pages folder.\n *            - data:           An {Object} or {Function} to pass as the root data object to the React page(s).\n *                              If a function is passed, details about the URL and rendering page are passed\n *                              as an argument.\n *                              This is useful as an API hook when creating a `react-middleware` package\n *                              to be shared as a module.\n *            - watch:          Flag indicating if changes to files should invalidate the cache.\n *                              True by default when not in 'production'.\n *            - webpackLoaders: An array of webpack loaders to use.\n *                              Default loaders are replaced with this array.\n *            - logger:         Custom logger to use (object that exposes [info, warn, error] methods).\n *\n */\nconst api = (options = {}) => {\n  // Setup initial conditions.\n  const watch = R.is(Boolean, options.watch) ? options.watch : !IS_PRODUCTION;\n\n  // Prepare the middleware.\n  const middleware = express.Router();\n\n  const paths = middleware.paths = middlewarePaths(options);\n  const templates = middleware.templates = templatesFiles(middleware.paths);\n  const routes = templates.routes.import();\n\n  middleware.use(compression());\n  middleware.use(express.static(paths.public, { maxage: '60 days' }));\n\n  routerHtml(middleware, paths, routes, options.data);\n  routerCss(middleware, paths, { watch });\n  routerJs(middleware, routes);\n\n  // Decorate the middleware with functions.\n  middleware.start = (startOptions) => api.start(express(), middleware, startOptions);\n  middleware.clearCache = () => api.clearCache();\n  middleware.build = buildFunction(middleware, paths, routes, options.webpackLoaders);\n  middleware.logger = options.logger || log;\n\n  // Finish up.\n  return middleware;\n};\n\n\n\n/**\n * Starts a web server.\n * @param {function} app: The express instance (eg. app = express();)\n *                        If not specified a new express instance is created.\n * @param {function} middleware: The react-middleware instance to use.\n * @param {options}\n *            - port:     The port to run on.\n *            - name:     The display name of the server (emitted to the console).\n *            - version:  The version of the app (emitted to the console).\n *            - silent:   Flag indicating if startup output should be suppressed.\n * @return Promise.\n */\napi.start = (app, middleware, options = {}) => {\n  // Ensure required parameters were passed.\n  if (!R.is(Function, app)) { throw new Error('Start Method: An express instance must be specified.'); }\n  if (!R.is(Function, middleware)) { throw new Error('Start Method: The [react-middleware] instance must be specified.'); }\n\n  // Extract startup values.\n  if (R.is(Number, options)) { options = { port: options }; }\n  const PORT = options.port || (IS_PRODUCTION ? 80 : 3030);\n  const NAME = options.name || 'Server';\n  const SILENT = options.silent === undefined ? false : options.silent;\n  const VERSION = options.version;\n\n  const logger = middleware.logger;\n  const logStarted = (js) => {\n    logger.info('');\n    logger.info(chalk.green(`Started: ${ NAME }`));\n    if (VERSION) {\n      logger.info(chalk.grey(' - version:'), VERSION);\n    }\n    logger.info(chalk.grey(' - port:   '), PORT);\n    logger.info(chalk.grey(' - env:    '), process.env.NODE_ENV || 'development');\n    if (js.files.length > 0) {\n      const seconds = js.elapsed / 1000;\n      logger.info(chalk.grey(' - js:     '), `${ Math.round(seconds * 10) / 10 } second build time`);\n      js.files.forEach(item => {\n        logger.info(chalk.grey(`            - ${ item.path },`), filesize(item.fileSize));\n      });\n    }\n    logger.info('');\n  };\n\n  return new Promise((resolve, reject) => {\n    // Build the javascript (webpack).\n    logger.info(chalk.grey(`Starting '${ NAME }'...`));\n    middleware.build()\n    .then(js => {\n      // Configure and start the express server.\n      app\n        .use(middleware)\n        .listen(PORT, () => {\n          if (!SILENT) { logStarted(js); }\n          resolve();\n        });\n    })\n    .catch(err => {\n      logger.error('err', err);\n      reject(err);\n    });\n  });\n};\n\n\n\n/**\n * Initalizes the default folder/template structure.\n * @param {string} path:  The base-path. Use './' to create\n *                        relative to the root of the host module.\n */\napi.init = (path) => {\n  if (!R.is(String, path)) { path = './site'; }\n  api({ base: path }).templates.createSync();\n  return api;\n};\n\n\n\n/**\n * Clears all cached content.\n */\napi.clearCache = () => {\n  css.delete();\n  return api;\n};\n\n\n\n// ----------------------------------------------------------------------------\nexport default api;\n"]}
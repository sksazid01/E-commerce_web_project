{"version":3,"sources":["../src/templates.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;;;;kBASe,UAAC,KAAD,EAAW;AACxB,MAAM,WAAW,SAAX,QAAW,CAAC,SAAD,EAAY,UAAZ,EAAwB,YAAxB,EAAyC;AACxD,gBAAY,gBAAE,EAAF,CAAK,MAAL,EAAa,SAAb,IAA8B,SAA9B,SAA8C,EAA1D;AACA,QAAM,+BAA8B,SAA9B,GAA4C,UAAlD;AACA,QAAM,aAAiB,YAAjB,SAAmC,UAAzC;AACA,WAAO,uBAAa,UAAb,EAAyB,UAAzB,CAAP;AACD,GALD;;AAOA,MAAM,YAAY;AAChB,YAAQ,SAAS,IAAT,EAAe,WAAf,EAA4B,MAAM,IAAlC,CADQ;AAEhB,UAAM,SAAS,MAAT,EAAiB,UAAjB,EAAiC,MAAM,OAAvC,WAFU;AAGhB,aAAS,SAAS,MAAT,EAAiB,WAAjB,EAAkC,MAAM,OAAxC,WAHO;AAIhB,UAAM,SAAS,MAAT,EAAiB,UAAjB,EAAiC,MAAM,KAAvC,WAJU;AAKhB,aAAS,SAAS,MAAT,EAAiB,WAAjB,EAAkC,MAAM,KAAxC,WALO;AAMhB,eAAW,SAAS,MAAT,EAAiB,UAAjB,EAAiC,MAAM,KAAvC,WANK;AAOhB,kBAAc,SAAS,KAAT,EAAgB,eAAhB,EAAiC,MAAM,GAAvC,CAPE;AAQhB,kBAAc,SAAS,KAAT,EAAgB,mBAAhB,EAAqC,MAAM,GAA3C,CARE;AAShB,aAAS,SAAS,SAAT,EAAoB,UAApB,EAAgC,MAAM,OAAtC,CATO;AAUhB,iBAAa,SAAS,QAAT,EAAmB,UAAnB,EAAmC,MAAM,MAAzC,aAVG;AAWhB,iBAAa,SAAS,QAAT,EAAmB,aAAnB,EAAsC,MAAM,MAA5C,aAXG;;;;;AAgBhB,cAhBgB,wBAgBH;AACX,YAAM,UAAN;AACA,aAAO,IAAP,CAAY,SAAZ,EAAuB,OAAvB,CAA+B,eAAO;AACpC,YAAM,OAAO,UAAU,GAAV,CAAb;AACA,YAAI,kCAAJ,EAA8B;AAC5B,eAAK,QAAL;AACD;AACF,OALD;AAMD;AAxBe,GAAlB;;AA2BA,SAAO,SAAP;AACD,C","file":"templates.js","sourcesContent":["import R from 'ramda';\nimport Template from './template';\n\n\n\n\n/**\n * Returns the set of template files.\n * @param paths: The middleware folder paths object.\n */\nexport default (paths) => {\n  const template = (sourceDir, sourceFile, targetFolder) => {\n    sourceDir = R.is(String, sourceDir) ? `${ sourceDir }/` : '';\n    const sourcePath = `../templates/${ sourceDir }${ sourceFile }`;\n    const targetPath = `${ targetFolder }/${ sourceFile }`;\n    return new Template(sourcePath, targetPath);\n  };\n\n  const templates = {\n    routes: template(null, 'routes.js', paths.base),\n    html: template('Html', 'Html.jsx', `${ paths.layouts }/Html`),\n    htmlCss: template('Html', 'Html.styl', `${ paths.layouts }/Html`),\n    home: template('Home', 'Home.jsx', `${ paths.pages }/Home`),\n    homeCss: template('Home', 'Home.styl', `${ paths.pages }/Home`),\n    homeEntry: template('Home', 'entry.js', `${ paths.pages }/Home`),\n    normalizeCss: template('css', 'normalize.css', paths.css),\n    globalMixins: template('css', 'global.mixin.styl', paths.css),\n    scripts: template('scripts', 'index.js', paths.scripts),\n    imageMoon1x: template('images', 'moon.jpg', `${ paths.public }/images`),\n    imageMoon2x: template('images', 'moon@2x.jpg', `${ paths.public }/images`),\n\n    /**\n     * Creates all template files if they don't already exist.\n     */\n    createSync() {\n      paths.createSync();\n      Object.keys(templates).forEach(key => {\n        const file = templates[key];\n        if (file instanceof Template) {\n          file.copySync();\n        }\n      });\n    },\n  };\n\n  return templates;\n};\n"]}
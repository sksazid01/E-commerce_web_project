{"version":3,"sources":["../src/paths.js"],"names":[],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAWO,IAAM,gDAAoB,SAApB,iBAAoB,CAAC,SAAD,EAAY,UAAZ,EAA2B;AAC1D,MAAM,MAAM,eAAO,IAAP,CAAY,SAAZ,EAAuB,cAAvB,EAAuC,UAAvC,CAAZ;AACA,MAAI,kBAAG,UAAH,CAAc,GAAd,CAAJ,EAAwB;AACtB,WAAO,GAAP;AACD;;AAED,MAAM,SAAS,eAAO,OAAP,CAAe,SAAf,EAA0B,IAA1B,CAAf;AACA,MAAI,WAAW,GAAf,EAAoB;AAClB,WAAO,kBAAkB,MAAlB,EAA0B,UAA1B,CAAP,C;AACD;AACD,SAAO,SAAP;AACD,CAXM;;AAgBP,IAAM,cAAc,SAAd,WAAc,CAAC,KAAD,EAAW;AAC7B,MAAM,SAAS,EAAf;AACA,SAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,eAAO;AAChC,QAAM,OAAO,MAAM,GAAN,CAAb;AACA,QAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,IAAb,CAAJ,EAAwB;AACtB,aAAO,GAAP,IAAc,kBAAG,UAAH,CAAc,IAAd,CAAd;AACD;AACF,GALD;AAMA,SAAO,MAAP;AACD,CATD;;AAYA,IAAM,aAAa,SAAb,UAAa,CAAC,KAAD,EAAW;AAC5B,MAAM,SAAS,gBAAE,MAAF,CAAS,YAAY,KAAZ,CAAT,CAAf;AACA,MAAM,cAAc,gBAAE,IAAF,CAChB,gBAAE,GAAF,CAAM;AAAA,WAAW,SAAS,CAAT,GAAa,CAAxB;AAAA,GAAN,CADgB,EAEhB,gBAAE,GAFc,EAGhB,MAHgB,CAApB;AAIA,MAAI,gBAAgB,OAAO,MAA3B,EAAmC;AAAE,WAAO,IAAP;AAAc;AACnD,MAAI,gBAAgB,CAApB,EAAuB;AAAE,WAAO,KAAP;AAAe;AACxC,SAAO,SAAP;AACD,CATD;;AAYA,IAAM,oBAAoB,SAApB,iBAAoB,CAAC,KAAD,EAAW;AACnC,SAAO,IAAP,CAAY,KAAZ,EAAmB,OAAnB,CAA2B,eAAO;AAChC,QAAM,OAAO,MAAM,GAAN,CAAb;AACA,QAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,IAAb,CAAJ,EAAwB;AAAE,wBAAG,aAAH,CAAiB,IAAjB;AAAyB;AACpD,GAHD;AAIA,QAAM,KAAN,GAAc,WAAW,KAAX,CAAd;AACD,CAND;;kBAae,YAAkB;AAAA,MAAjB,OAAiB,yDAAP,EAAO;;;AAE/B,MAAI,UAAU,QAAQ,IAAR,IAAgB,IAA9B;AACA,YAAU,QAAQ,UAAR,CAAmB,GAAnB,IACU,eAAO,OAAP,CAAe,OAAf,CADV,GAEU,OAFpB;;AAIA,MAAM,SAAS,SAAT,MAAS,CAAC,KAAD,EAAQ,WAAR;AAAA,WAAwB,QAAQ,KAAR,KAAkB,eAAO,IAAP,CAAY,OAAZ,EAAqB,WAArB,CAA1C;AAAA,GAAf;;AAEA,MAAM,QAAQ;AACZ,UAAM,OADM;AAEZ,SAAK,OAAO,KAAP,EAAc,MAAd,CAFO;AAGZ,YAAQ,OAAO,QAAP,EAAiB,SAAjB,CAHI;AAIZ,aAAS,OAAO,SAAP,EAAkB,gBAAlB,CAJG;AAKZ,gBAAY,OAAO,YAAP,EAAqB,mBAArB,CALA;AAMZ,WAAO,OAAO,OAAP,EAAgB,cAAhB,CANK;AAOZ,aAAS,OAAO,SAAP,EAAkB,UAAlB,CAPG;AAQZ,cARY,wBAQC;AAAE,wBAAkB,KAAlB;AAA2B;AAR9B,GAAd;AAUA,QAAM,KAAN,GAAc,WAAW,KAAX,CAAd;;;AAGA,SAAO,KAAP;AACD,C","file":"paths.js","sourcesContent":["import R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\n\n\n/**\n * Walks up the folder hierarchy looking for the closest module.\n * @param {String} moduleDir: The path to the module directory\n *                            (ie. the parent of node_modules).\n * @param {String} moduleName: The name of the module you are looking for.\n *\n * @return {String}.\n */\nexport const closestModulePath = (moduleDir, moduleName) => {\n  const dir = fsPath.join(moduleDir, 'node_modules', moduleName);\n  if (fs.existsSync(dir)) {\n    return dir;\n  }\n  // Not found, walk up the folder-hierarhcy.\n  const parent = fsPath.resolve(moduleDir, '..');\n  if (parent !== '/') {\n    return closestModulePath(parent, moduleName); // <== RECURSION.\n  }\n  return undefined;\n};\n\n\n\n\nconst pathsStatus = (paths) => {\n  const result = {};\n  Object.keys(paths).forEach(key => {\n    const path = paths[key];\n    if (R.is(String, path)) {\n      result[key] = fs.existsSync(path);\n    }\n  });\n  return result;\n};\n\n\nconst pathsExist = (paths) => {\n  const values = R.values(pathsStatus(paths));\n  const existsTotal = R.pipe(\n      R.map(exists => (exists ? 1 : 0)),\n      R.sum\n    )(values);\n  if (existsTotal === values.length) { return true; }\n  if (existsTotal === 0) { return false; }\n  return 'partial';\n};\n\n\nconst createFoldersSync = (paths) => {\n  Object.keys(paths).forEach(key => {\n    const path = paths[key];\n    if (R.is(String, path)) { fs.ensureDirSync(path); }\n  });\n  paths.exist = pathsExist(paths);\n};\n\n\n\n\n\n\nexport default (options = {}) => {\n  // Prepare folder paths.\n  let baseDir = options.base || './';\n  baseDir = baseDir.startsWith('.')\n                    ? fsPath.resolve(baseDir)\n                    : baseDir;\n\n  const folder = (param, defaultPath) => options[param] || fsPath.join(baseDir, defaultPath);\n\n  const paths = {\n    base: baseDir,\n    css: folder('css', '/css'),\n    public: folder('public', '/public'),\n    layouts: folder('layouts', '/views/layouts'),\n    components: folder('components', '/views/components'),\n    pages: folder('pages', '/views/pages'),\n    scripts: folder('scripts', '/scripts'),\n    createSync() { createFoldersSync(paths); },\n  };\n  paths.exist = pathsExist(paths);\n\n  // Finish up.\n  return paths;\n};\n"]}
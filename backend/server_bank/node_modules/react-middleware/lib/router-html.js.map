{"version":3,"sources":["../src/router-html.js"],"names":[],"mappings":"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","file":"router-html.js","sourcesContent":["/* eslint global-require:0 */\n\nimport R from 'ramda';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport Url from 'url';\nimport * as util from 'js-util';\n\nconst NODE_ENV = process.env.NODE_ENV || 'development';\n\n\nconst asValues = (obj, args) => {\n  const result = R.clone(obj);\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (R.is(Function, value)) {\n      result[key] = value(args); // Convert the function into a value.\n    } else if (R.is(Object, value)) {\n      result[key] = asValues(value, args); // <== RECURSION.\n    }\n  });\n  return result;\n};\n\n\n\nconst getFilePath = (basePath, name, extension) => {\n  let path;\n  name = name.charAt(0).toUpperCase() + name.slice(1); // Capitalize the file/folder name.\n\n  // Look first for the existence of a stand-alone file.\n  path = fsPath.join(basePath, `${ name }.${ extension }`);\n  if (fs.existsSync(path)) { return path; }\n\n  // Look for the file within a folder.\n  path = fsPath.join(basePath, name, `${ name }.${ extension }`);\n  if (fs.existsSync(path)) { return path; }\n\n  return undefined;\n};\n\n\n\nexport default (middleware, paths, routes, data) => {\n  const getLayout = (route) => {\n    const layoutName = route.layout || 'Html';\n    const path = getFilePath(paths.layouts, layoutName, 'jsx');\n    if (!path) { throw new Error(`A layout named '${ layoutName }' does not exist.`); }\n    return require(path).default;\n  };\n\n  const getPage = (route) => {\n    const pageName = route.page;\n    const path = getFilePath(paths.pages, pageName, 'jsx');\n    if (!path) { throw new Error(`A page named '${ pageName }' does not exist.`); }\n    return require(path).default;\n  };\n\n  function getData(route, url) {\n    return R.is(Function, data) ? data({ route, url }) : data;\n  }\n\n  const render = (req, res, route) => {\n    // Setup initial conditions.\n    const host = req.get('host');\n    const params = Object\n      .keys(req.params)\n      .forEach(key => { req.params[key] = util.toType(req.params[key]); });\n    const url = {\n      params,\n      path: req.url,\n      pathname: Url.parse(req.url).pathname,\n      query: req.query,\n      pattern: route.pattern,\n      protocol: req.secure ? 'https:' : 'http',\n      host: host.split(':')[0],\n      port: host.split(':')[1],\n    };\n    const args = { url };\n    route = asValues(route, args);\n\n    // Prepare the page body.\n    const requestData = { url };\n    const layoutData = getData(route, url);\n    const pageProps = route.props || {};\n    const pageData = pageProps.data || layoutData;\n    if (pageData) {\n      pageProps.data = pageData;\n    }\n    pageProps.request = requestData;\n    const pageBody = React.createElement(getPage(route), pageProps);\n\n    // Prepare the root <Html> page props.\n    const layoutProps = {\n      title: route.title,\n      body: pageBody,\n      data: layoutData,\n      env: NODE_ENV,\n      page: { name: route.page },\n      request: requestData,\n    };\n\n    // Convert the page-layout into HTML.\n    const layout = React.createElement(getLayout(route), layoutProps);\n    const html = ReactDOMServer.renderToStaticMarkup(layout);\n    res.send(html);\n  };\n\n  // Register each route as a GET handler.\n  Object.keys(routes).forEach(pattern => {\n    const route = routes[pattern];\n    route.pattern = pattern;\n    middleware.get(pattern, (req, res) => { render(req, res, route); });\n  });\n};\n"]}
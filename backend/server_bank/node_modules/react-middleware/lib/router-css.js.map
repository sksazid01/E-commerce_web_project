{"version":3,"sources":["../src/router-css.js"],"names":[],"mappings":"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","file":"router-css.js","sourcesContent":["/* eslint max-len:0 */\n\nimport R from 'ramda';\nimport fs from 'fs-extra';\nimport fsPath from 'path';\nimport css from 'file-system-css';\nimport chalk from 'chalk';\nimport log from './log';\n\nconst RESET_NAMES = ['normalize.css', 'reset.css'];\nconst isCssReset = (path) => R.any(name => path.endsWith(name), RESET_NAMES);\n\n\nexport const getOptions = (options = {}) => {\n  const isProduction = process.env.NODE_ENV === 'production';\n  return {\n    cache: true,\n    pathsRequired: false,\n    watch: options.watch === undefined ? !isProduction : options.watch,\n    minify: options.minify === undefined ? isProduction : options.minify,\n  };\n};\n\nconst isMixin = (path) => {\n  const name = fsPath.basename(path, '.styl');\n  if (name === 'mixin') { return true; }\n  if (name.endsWith('.mixin')) { return true; }\n  return false;\n};\n\n\n\nexport default (middleware, paths, options = {}) => {\n  options = getOptions(options);\n\n  // Bail out if the /css folder does not exist.\n  if (!fs.existsSync(paths.css)) { return; }\n\n  // Determine whether a CSS reset file exists within /css.\n  const globalCssPaths = fs.readdirSync(paths.css).map(path => fsPath.join(`${ paths.css }/${ path }`));\n  const globalMixinPaths = R.filter(isMixin, globalCssPaths);\n  const cssResetPath = R.pipe(\n    R.filter(isCssReset),\n    R.map(fileName => fsPath.join(paths.css, fileName))\n  )(globalCssPaths);\n\n\n  const toSourcePath = (key, value) => {\n    const expandPaths = (base, path) =>\n      R.pipe(\n        R.split(','),\n        R.map(folder => `${ base }/${ folder.trim() }`)\n      )(path);\n\n    switch (key) {\n      case 'global': return [cssResetPath, paths.css];\n\n      case 'layouts': return paths.layouts;\n      case 'layout': return expandPaths(paths.layouts, value);\n\n      case 'pages': return paths.pages;\n      case 'page': return expandPaths(paths.pages, value);\n\n      case 'components': return paths.components;\n      case 'component': return expandPaths(paths.components, value);\n\n      default: // No match.\n    }\n\n    return undefined;\n  };\n\n  const queryToSourcePaths = (query) => {\n    // Process the query-string converting it into a set\n    // of paths that point to the source CSS files.\n    query = R.clone(query);\n    query = Object.keys(query).length === 0\n        ? { global: true, pages: true, components: true, layouts: true }\n        : query;\n\n    return R.pipe(\n      R.keys,\n      R.map(key => toSourcePath(key, query[key])),\n      R.flatten(),\n      R.reject(R.isNil)\n    )(query);\n  };\n\n\n  // Render the CSS response.\n  const render = (req, res, sourcePaths = []) => {\n    // Prep the source paths.\n    if (!R.is(Array, sourcePaths)) { sourcePaths = [sourcePaths]; }\n    sourcePaths = R.flatten(sourcePaths);\n    if (sourcePaths.length === 0) {\n      return res.status(404).send({ message: 'No CSS paths to load.' });\n    }\n\n    // Compile the CSS (or retrieve from cache).\n    css.compile([globalMixinPaths, sourcePaths], options)\n    .then(result => {\n      const cssResult = result.css;\n      if (R.is(String, cssResult)) {\n        res.set('Content-Type', 'text/css');\n        res.send(cssResult);\n      } else {\n        res.status(404).send({ message: `No CSS at ${ req.url }` });\n      }\n    })\n    .catch(err => {\n      const args = {\n        error: `Failed to compile CSS for URL path '${ req.url }'`,\n        message: err.message,\n        paths: sourcePaths,\n      };\n      log.error(chalk.red(args.error));\n      log.error(chalk.red(args.message));\n      res.status(500).send(args);\n    });\n\n    return undefined;\n  };\n\n  const renderGroup = (req, res, keys = []) => {\n    const query = {};\n    keys.forEach(key => { query[key] = true; });\n    render(req, res, queryToSourcePaths(query));\n  };\n\n  const renderSpecific = (req, res, key) => {\n    const query = { [key]: req.params.name };\n    render(req, res, queryToSourcePaths(query));\n  };\n\n  // Listen to GET requests for CSS.\n  middleware.get('/css', (req, res) => render(req, res, queryToSourcePaths(req.query)));\n  middleware.get('/css/common', (req, res) => renderGroup(req, res, ['global', 'layouts', 'components']));\n  middleware.get('/css/global', (req, res) => renderGroup(req, res, ['global']));\n\n  middleware.get('/css/pages', (req, res) => renderGroup(req, res, ['pages']));\n  middleware.get('/css/page/:name', (req, res) => renderSpecific(req, res, 'page'));\n\n  middleware.get('/css/layouts', (req, res) => renderGroup(req, res, ['layouts']));\n  middleware.get('/css/layout/:name', (req, res) => renderSpecific(req, res, 'layout'));\n\n  middleware.get('/css/components', (req, res) => renderGroup(req, res, ['components']));\n  middleware.get('/css/component/:name', (req, res) => renderSpecific(req, res, 'component'));\n};\n"]}
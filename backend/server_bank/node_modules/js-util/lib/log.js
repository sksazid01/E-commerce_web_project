'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.METHODS = exports.COLORS = undefined;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint no-use-before-define:0 no-console:0 */
var COLORS = exports.COLORS = ['black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', 'gray'];

var METHODS = exports.METHODS = ['info', 'warn', 'error'];

var log = function log(level, items) {
  if (api.silent) {
    return;
  }

  // Convert objects to JSON.
  items = items.map(function (item) {
    if (item instanceof Error) {
      return item.stack;
    }
    if (_ramda2.default.is(Object, item)) {
      return JSON.stringify(item, null, 2);
    }
    return item;
  });

  // Convert to final string.
  var output = items.join(' ');

  // Perform level specific transformations.
  switch (level) {
    // Turn errors to red text.
    case 'error':
      output = _chalk2.default.red(output);break;
    default:
  }

  // Write to the console.
  console.log(output);
};

/**
 * Stub log shim.
 * Pipe these log items into a proper service log.
 */
var api = {
  silent: false,
  info: function info() {
    for (var _len = arguments.length, items = Array(_len), _key = 0; _key < _len; _key++) {
      items[_key] = arguments[_key];
    }

    log('info', items);
  },
  warn: function warn() {
    for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    log('warn', items);
  },
  error: function error() {
    for (var _len3 = arguments.length, items = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    log('error', items);
  }
};

// Add color formatting methods.
COLORS.forEach(function (color) {
  api[color] = _chalk2.default[color];
});

// Add color options to each method.
METHODS.forEach(function (method) {
  COLORS.forEach(function (color) {
    api[method][color] = function () {
      for (var _len4 = arguments.length, items = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        items[_key4] = arguments[_key4];
      }

      items = items.map(function (v) {
        return _chalk2.default[color](v);
      });
      api[method].apply(null, items);
    };
  });
});

exports.default = api;
//# sourceMappingURL=log.js.map
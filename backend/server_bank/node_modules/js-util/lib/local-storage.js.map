{"version":3,"sources":["../src/local-storage.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;AAGA,IAAM,QAAQ;AACZ,QAAM,EADM,E;;AAGZ,YAHY,sBAGD,GAHC,EAGI;AACd,QAAI,OAAO,YAAX,EAAyB;AACvB,aAAO,YAAP,CAAoB,UAApB,CAA+B,GAA/B;AACD,KAFD,MAEO;AACL,aAAO,KAAK,IAAL,CAAU,GAAV,CAAP;AACD;AACF,GATW;AAWZ,SAXY,mBAWJ,GAXI,EAWC,KAXD,EAWQ;AAClB,QAAI,OAAO,YAAX,EAAyB;AACvB,aAAO,YAAP,CAAoB,OAApB,CAA4B,GAA5B,EAAiC,KAAjC;AACD,KAFD,MAEO;AACL,WAAK,IAAL,CAAU,GAAV,IAAiB,KAAjB;AACD;AACF,GAjBW;AAmBZ,SAnBY,mBAmBJ,GAnBI,EAmBC;AACX,QAAI,OAAO,YAAX,EAAyB;AACvB,aAAO,OAAO,YAAP,CAAoB,OAApB,CAA4B,GAA5B,CAAP;AACD;AACD,WAAO,KAAK,IAAL,CAAU,GAAV,CAAP;AACD;AAxBW,CAAd;;IA4BM,Y;;;;;;;;;;;2BAIG;AACL,UAAM,UAAU,OAAO,YAAP,GAAsB,OAAO,YAA7B,GAA4C,MAAM,IAAlE;AACA,aAAO,OAAO,IAAP,CAAY,OAAZ,CAAP;AACD;;;;;;;;;;;;;;;;yBAcI,G,EAAK,K,EAAqB;AAAA,UAAd,OAAc,yDAAJ,EAAI;;AAC7B,UAAI,aAAJ;AACA,UAAI,UAAU,IAAd,EAAoB;;AAElB,cAAM,UAAN,CAAiB,GAAjB;AACD,OAHD,MAGO,IAAI,UAAU,SAAd,EAAyB;;AAE9B,YAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,KAAb,CAAJ,EAAyB;AACvB,iBAAO,QAAP;AACD,SAFD,MAEO,IAAI,gBAAE,EAAF,CAAK,OAAL,EAAc,KAAd,CAAJ,EAA0B;AAC/B,iBAAO,MAAP;AACD,SAFM,MAEA,IAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,KAAb,CAAJ,EAAyB;AAC9B,iBAAO,QAAP;AACD,SAFM,MAEA,IAAI,gBAAE,EAAF,CAAK,IAAL,EAAW,KAAX,CAAJ,EAAuB;AAC5B,iBAAO,MAAP;AACD,SAFM,MAEA;AACL,iBAAO,QAAP;AACD;;AAED,YAAM,aAAa,EAAE,YAAF,EAAS,UAAT,EAAnB;AACA,cAAM,OAAN,CAAc,GAAd,EAAmB,KAAK,SAAL,CAAe,UAAf,CAAnB;AACD,OAhBM,MAgBA;;AAEL,YAAI,OAAO,MAAM,OAAN,CAAc,GAAd,CAAX;AACA,YAAI,IAAJ,EAAU;AACR,iBAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACA,kBAAQ,KAAK,IAAb;AACE,iBAAK,MAAL;AACA,iBAAK,MAAL;AACA,iBAAK,QAAL;AACE,sBAAQ,KAAK,KAAb;AACA;;AAEF,iBAAK,QAAL;AACE,sBAAQ,WAAW,KAAK,KAAhB,CAAR;AACA;;AAEF,iBAAK,MAAL;AACE,sBAAQ,IAAI,IAAJ,CAAS,KAAK,KAAd,CAAR;AACA;;AAEF,iBAAK,QAAL;AACE,sBAAQ,KAAK,KAAb;AACA;;AAEF,oB;AAnBF;AAqBD,SAvBD,MAuBO;AACL,oBAAQ,SAAR;AACD;AACD,YAAI,UAAU,SAAd,EAAyB;AAAE,kBAAQ,QAAQ,OAAhB;AAA0B;AACtD;;;AAGD,aAAO,KAAP;AACD;;;;;;kBAKY,IAAI,YAAJ,E","file":"local-storage.js","sourcesContent":["import R from 'ramda';\n\n\nconst store = {\n  data: {}, // Used to fake when store not available (ie. on server or JSDOM).\n\n  removeItem(key) {\n    if (global.localStorage) {\n      global.localStorage.removeItem(key);\n    } else {\n      delete this.data[key];\n    }\n  },\n\n  setItem(key, value) {\n    if (global.localStorage) {\n      global.localStorage.setItem(key, value);\n    } else {\n      this.data[key] = value;\n    }\n  },\n\n  getItem(key) {\n    if (global.localStorage) {\n      return global.localStorage.getItem(key);\n    }\n    return this.data[key];\n  },\n};\n\n\nclass LocalStorage {\n  /**\n   * Retrieves the set of keys within local-storage.\n   */\n  keys() {\n    const storage = global.localStorage ? global.localStorage : store.data;\n    return Object.keys(storage);\n  }\n\n\n  /*\n  * Gets or sets the value for the given key.\n  *\n  * @param key:         The unique identifier of the value (this is prefixed with the namespace).\n  * @param value:       (optional). The value to set (pass null to remove).\n  * @param options:\n  *           default:  (optional). The default value to return if the session\n  *                     does not contain the value (ie. undefined).\n  *\n  * @return the read value.\n  */\n  prop(key, value, options = {}) {\n    let type;\n    if (value === null) {\n      // REMOVE.\n      store.removeItem(key);\n    } else if (value !== undefined) {\n      // WRITE.\n      if (R.is(String, value)) {\n        type = 'string';\n      } else if (R.is(Boolean, value)) {\n        type = 'bool';\n      } else if (R.is(Number, value)) {\n        type = 'number';\n      } else if (R.is(Date, value)) {\n        type = 'date';\n      } else {\n        type = 'object';\n      }\n\n      const writeValue = { value, type };\n      store.setItem(key, JSON.stringify(writeValue));\n    } else {\n      // READ ONLY.\n      let json = store.getItem(key);\n      if (json) {\n        json = JSON.parse(json);\n        switch (json.type) {\n          case 'null':\n          case 'bool':\n          case 'string':\n            value = json.value;\n            break;\n\n          case 'number':\n            value = parseFloat(json.value);\n            break;\n\n          case 'date':\n            value = new Date(json.value);\n            break;\n\n          case 'object':\n            value = json.value;\n            break;\n\n          default: // Ignore.\n        }\n      } else {\n        value = undefined;\n      }\n      if (value === undefined) { value = options.default; }\n    }\n\n    // Finish up.\n    return value;\n  }\n}\n\n\n\nexport default new LocalStorage();\n"]}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var store = {
  data: {}, // Used to fake when store not available (ie. on server or JSDOM).

  removeItem: function removeItem(key) {
    if (global.localStorage) {
      global.localStorage.removeItem(key);
    } else {
      delete this.data[key];
    }
  },
  setItem: function setItem(key, value) {
    if (global.localStorage) {
      global.localStorage.setItem(key, value);
    } else {
      this.data[key] = value;
    }
  },
  getItem: function getItem(key) {
    if (global.localStorage) {
      return global.localStorage.getItem(key);
    }
    return this.data[key];
  }
};

var LocalStorage = function () {
  function LocalStorage() {
    _classCallCheck(this, LocalStorage);
  }

  _createClass(LocalStorage, [{
    key: 'keys',

    /**
     * Retrieves the set of keys within local-storage.
     */
    value: function keys() {
      var storage = global.localStorage ? global.localStorage : store.data;
      return Object.keys(storage);
    }

    /*
    * Gets or sets the value for the given key.
    *
    * @param key:         The unique identifier of the value (this is prefixed with the namespace).
    * @param value:       (optional). The value to set (pass null to remove).
    * @param options:
    *           default:  (optional). The default value to return if the session
    *                     does not contain the value (ie. undefined).
    *
    * @return the read value.
    */

  }, {
    key: 'prop',
    value: function prop(key, value) {
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var type = void 0;
      if (value === null) {
        // REMOVE.
        store.removeItem(key);
      } else if (value !== undefined) {
        // WRITE.
        if (_ramda2.default.is(String, value)) {
          type = 'string';
        } else if (_ramda2.default.is(Boolean, value)) {
          type = 'bool';
        } else if (_ramda2.default.is(Number, value)) {
          type = 'number';
        } else if (_ramda2.default.is(Date, value)) {
          type = 'date';
        } else {
          type = 'object';
        }

        var writeValue = { value: value, type: type };
        store.setItem(key, JSON.stringify(writeValue));
      } else {
        // READ ONLY.
        var json = store.getItem(key);
        if (json) {
          json = JSON.parse(json);
          switch (json.type) {
            case 'null':
            case 'bool':
            case 'string':
              value = json.value;
              break;

            case 'number':
              value = parseFloat(json.value);
              break;

            case 'date':
              value = new Date(json.value);
              break;

            case 'object':
              value = json.value;
              break;

            default: // Ignore.
          }
        } else {
            value = undefined;
          }
        if (value === undefined) {
          value = options.default;
        }
      }

      // Finish up.
      return value;
    }
  }]);

  return LocalStorage;
}();

exports.default = new LocalStorage();
//# sourceMappingURL=local-storage.js.map
{"version":3,"sources":["../src/color.js"],"names":[],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAeO,IAAM,gCAAY,SAAZ,SAAY,CAAC,KAAD,EAAW;AAClC,MAAI,CAAC,gBAAE,EAAF,CAAK,MAAL,EAAa,KAAb,CAAL,EAA0B;AAAE,WAAO,KAAP;AAAe;AAC3C,MAAI,QAAQ,CAAC,CAAb,EAAgB;AAAE,YAAQ,CAAC,CAAT;AAAa;AAC/B,MAAI,QAAQ,CAAZ,EAAe;AAAE,YAAQ,CAAR;AAAY;;AAE7B,MAAI,UAAU,CAAd,EAAiB;AACf,WAAO,aAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAZ,EAAe;AACpB,8BAAyB,KAAK,GAAL,CAAS,KAAT,CAAzB;AACD,GAFM,MAEA,IAAI,QAAQ,CAAZ,EAAe;AACpB,oCAA+B,KAA/B;AACD;AACD,SAAO,SAAP;AACD,CAbM","file":"color.js","sourcesContent":["import R from 'ramda';\n\n\n/*\n  Converts an alpha value into an `argb` color.\n  @param value: The alpha value\n\n                -1..0: Alpha percentage of black.\n                 0..1: Apha percentage of white.\n\n                If a string is passed, the string value is returned\n                assuming it to be an explicit color value (no-op).\n\n  @returns an `argb` style string.\n*/\nexport const fromAlpha = (value) => {\n  if (!R.is(Number, value)) { return value; }\n  if (value < -1) { value = -1; }\n  if (value > 1) { value = 1; }\n\n  if (value === 0) {\n    return 'transparent';\n  } else if (value < 0) {\n    return `rgba(0, 0, 0, ${ Math.abs(value) })`;\n  } else if (value > 0) {\n    return `rgba(255, 255, 255, ${ value })`;\n  }\n  return undefined;\n};\n"]}
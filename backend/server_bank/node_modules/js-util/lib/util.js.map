{"version":3,"sources":["../src/util.js"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["/* global setTimeout, clearTimeout */\nimport R from 'ramda';\n\n\n\n\n/**\n * Returns a copy of the array with falsey values removed.\n * Removes:\n *   - null\n *   - undefined\n *   - empty-string ('')\n *\n * @param {Array} value: The value to examine.\n * @return {Array}.\n */\nexport const compact = (value) => R.pipe(\n                                    R.reject(R.isNil),\n                                    R.reject(R.isEmpty)\n                                  )(value);\n\n\n\n/**\n * Determines whether the value is a simple object (ie. not a class instance).\n * @param value: The value to examine.\n * @return {Boolean}.\n */\nexport const isPlainObject = (value) => {\n  if (R.is(Object, value) === false) return false;\n\n  // Not plain if it has a modified constructor.\n  const ctr = value.constructor;\n  if (typeof ctr !== 'function') { return false; }\n\n  // If has modified prototype.\n  const prot = ctr.prototype;\n  if (R.is(Object, prot) === false) { return false; }\n\n  // If the constructor does not have an object-specific method.\n  if (prot.hasOwnProperty('isPrototypeOf') === false) { return false; }\n\n  // Finish up.\n  return true;\n};\n\n\n\n/**\n* A safe way to test any value as to wheather is is 'blank'\n* meaning it can be either:\n*   - null\n*   - undefined\n*   - empty-string ('')\n*   - empty-array ([]).\n*/\nexport const isBlank = (value) => {\n  if (value === null || value === undefined) { return true; }\n  if (R.is(Array, value) && compact(value).length === 0) { return true; }\n  if (R.is(String, value) && value.trim() === '') { return true; }\n  return false;\n};\n\n\n/**\n* Determines whether the given value is a number, or can be\n* parsed into a number.\n*\n* NOTE: Examines string values to see if they are numeric.\n*\n* @param value: The value to examine.\n* @returns true if the value is a number.\n*/\nexport const isNumeric = (value) => {\n  if (isBlank(value)) { return false; }\n  const number = parseFloat(value);\n  if (number === undefined) { return false; }\n  if (number.toString().length !== value.toString().length) { return false; }\n  return !Number.isNaN(number);\n};\n\n\n/**\n * Converts a value to a number if possible.\n * @param value: The value to convert.\n* @returns the converted number, otherwise the original value.\n */\nexport const toNumber = (value) => {\n  if (isBlank(value)) { return value; }\n  const number = parseFloat(value);\n  if (number === undefined) { return value; }\n  if (number.toString().length !== value.toString().length) { return value; }\n  return Number.isNaN(number) ? value : number;\n};\n\n\n/**\n* Converts a value to boolean (if it can).\n* @param value: The value to convert.\n* @param defaultValue: The value to return if the given value is null/undefined.\n* @returns the converted boolean, otherwise the original value.\n*/\nexport const toBool = (value, defaultValue) => {\n  if (R.isNil(value)) { return defaultValue; }\n  if (R.is(Boolean, value)) { return value; }\n  const asString = value.toString().trim().toLowerCase();\n  if (asString === 'true') { return true; }\n  if (asString === 'false') { return false; }\n  return defaultValue;\n};\n\n\n/**\n * Converts a string it's actual type if it can be derived.\n * @param {string} string: The string to convert.\n * @return the original or converted value.\n */\nexport const toType = (value) => {\n  if (!R.is(String, value)) { return value; }\n  const lowerCase = value.toLowerCase().trim();\n\n  // Boolean.\n  if (lowerCase === 'true') { return true; }\n  if (lowerCase === 'false') { return false; }\n\n  // Number.\n  const number = toNumber(lowerCase);\n  if (R.is(Number, number)) { return number; }\n\n  // Originanl type.\n  return value;\n};\n\n\n\n\n/**\n* Provides a more convenient way of setting a timeout.\n*\n* @param msecs:  The milliseconds to delay.\n* @param func:   The function to invoke.\n*\n* @returns  The timer handle.\n*           Use the [stop] method to cancel the timer.\n*/\nexport const delay = (msecs, func) => {\n  // Check parameters.\n  if (R.is(Function, msecs)) {\n    func = msecs;\n    msecs = 0; // Immediate 'defer' when no milliseconds value specified.\n  }\n  if (R.is(Function, func)) {\n    // Return an object with the running timer.\n    return {\n      msecs,\n      id: setTimeout(func, msecs),\n      stop() { clearTimeout(this.id); },\n    };\n  }\n  return undefined;\n};\n\n\n/**\n* Safely creates the given namespace on the root object.\n*\n* @param root:      The root object.\n* @param namespace: The dot-delimited NS string (excluding the root object).\n* @param options:\n*           - delimiter: The namespace delimiter. Default '.'\n*\n* @returns the child object of the namespace.\n*/\nexport const ns = (root, namespace, options = {}) => {\n  if (R.is(String, root) || R.is(Array, root)) {\n    namespace = root;\n    root = null;\n  }\n  if (isBlank(namespace)) { return undefined; }\n\n  const getOrCreate = (parent, name) => {\n    parent[name] = parent[name] || {};\n    return parent[name];\n  };\n\n  const add = (parent, parts) => {\n    let part = getOrCreate(parent, parts[0]);\n    if (parts.length > 1) {\n      parts.splice(0, 1);\n      part = add(part, parts);  // <= RECURSION.\n    }\n    return part;\n  };\n\n  // Build the namespace.\n  const delimiter = options.delimiter || '.';\n  if (!R.is(Array, namespace)) { namespace = namespace.split(delimiter); }\n  return add(root, namespace);\n};\n\n\n\n/*\n  Determines the parameter names of a function\n\n    See: http://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically-from-javascript\n\n  @param func: The function to examine.\n  @returns an array of strings.\n\n*/\nexport const functionParameters = (func) => {\n  const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n  const ARGUMENT_NAMES = /([^\\s,]+)/g;\n  if (!R.is(Function, func)) { return []; }\n  const fnStr = func.toString().replace(STRIP_COMMENTS, '');\n  let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n  if (result === null) { result = []; }\n  return result;\n};\n"]}
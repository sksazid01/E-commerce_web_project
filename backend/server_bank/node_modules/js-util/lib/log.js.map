{"version":3,"sources":["../src/log.js"],"names":[],"mappings":";;;;;;;AACA;;;;AACA;;;;;;;AAEO,IAAM,0BAAS,CACpB,OADoB,EAEpB,KAFoB,EAGpB,OAHoB,EAIpB,QAJoB,EAKpB,MALoB,EAMpB,SANoB,EAOpB,MAPoB,EAQpB,OARoB,EASpB,MAToB,CAAf;;AAYA,IAAM,4BAAU,CACrB,MADqB,EAErB,MAFqB,EAGrB,OAHqB,CAAhB;;AAOP,IAAM,MAAM,SAAN,GAAM,CAAC,KAAD,EAAQ,KAAR,EAAkB;AAC5B,MAAI,IAAI,MAAR,EAAgB;AAAE;AAAS;;;AAG3B,UAAQ,MAAM,GAAN,CAAU,gBAAQ;AACxB,QAAI,gBAAgB,KAApB,EAA2B;AACzB,aAAO,KAAK,KAAZ;AACD;AACD,QAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,IAAb,CAAJ,EAAwB;AACtB,aAAO,KAAK,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAP;AACD;AACD,WAAO,IAAP;AACD,GARO,CAAR;;;AAWA,MAAI,SAAS,MAAM,IAAN,CAAW,GAAX,CAAb;;;AAGA,UAAQ,KAAR;;AAEE,SAAK,OAAL;AAAc,eAAS,gBAAM,GAAN,CAAU,MAAV,CAAT,CAA4B;AAC1C;AAHF;;;AAOA,UAAQ,GAAR,CAAY,MAAZ;AACD,CA1BD;;;;;;AAkCA,IAAM,MAAM;AACV,UAAQ,KADE;AAEV,MAFU,kBAEK;AAAA,sCAAP,KAAO;AAAP,WAAO;AAAA;;AAAE,QAAI,MAAJ,EAAY,KAAZ;AAAqB,GAF5B;AAGV,MAHU,kBAGK;AAAA,uCAAP,KAAO;AAAP,WAAO;AAAA;;AAAE,QAAI,MAAJ,EAAY,KAAZ;AAAqB,GAH5B;AAIV,OAJU,mBAIM;AAAA,uCAAP,KAAO;AAAP,WAAO;AAAA;;AAAE,QAAI,OAAJ,EAAa,KAAb;AAAsB;AAJ9B,CAAZ;;;AASA,OAAO,OAAP,CAAe,iBAAS;AACtB,MAAI,KAAJ,IAAa,gBAAM,KAAN,CAAb;AACD,CAFD;;;AAKA,QAAQ,OAAR,CAAgB,kBAAU;AACxB,SAAO,OAAP,CAAe,iBAAS;AACtB,QAAI,MAAJ,EAAY,KAAZ,IAAqB,YAAc;AAAA,yCAAV,KAAU;AAAV,aAAU;AAAA;;AACjC,cAAQ,MAAM,GAAN,CAAU;AAAA,eAAK,gBAAM,KAAN,EAAa,CAAb,CAAL;AAAA,OAAV,CAAR;AACA,UAAI,MAAJ,EAAY,KAAZ,CAAkB,IAAlB,EAAwB,KAAxB;AACD,KAHD;AAID,GALD;AAMD,CAPD;;kBAWe,G","file":"log.js","sourcesContent":["/* eslint no-use-before-define:0 no-console:0 */\nimport R from 'ramda';\nimport chalk from 'chalk';\n\nexport const COLORS = [\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'magenta',\n  'cyan',\n  'white',\n  'gray',\n];\n\nexport const METHODS = [\n  'info',\n  'warn',\n  'error',\n];\n\n\nconst log = (level, items) => {\n  if (api.silent) { return; }\n\n  // Convert objects to JSON.\n  items = items.map(item => {\n    if (item instanceof Error) {\n      return item.stack;\n    }\n    if (R.is(Object, item)) {\n      return JSON.stringify(item, null, 2);\n    }\n    return item;\n  });\n\n  // Convert to final string.\n  let output = items.join(' ');\n\n  // Perform level specific transformations.\n  switch (level) {\n    // Turn errors to red text.\n    case 'error': output = chalk.red(output); break;\n    default:\n  }\n\n  // Write to the console.\n  console.log(output);\n};\n\n\n\n/**\n * Stub log shim.\n * Pipe these log items into a proper service log.\n */\nconst api = {\n  silent: false,\n  info(...items) { log('info', items); },\n  warn(...items) { log('warn', items); },\n  error(...items) { log('error', items); },\n};\n\n\n// Add color formatting methods.\nCOLORS.forEach(color => {\n  api[color] = chalk[color];\n});\n\n// Add color options to each method.\nMETHODS.forEach(method => {\n  COLORS.forEach(color => {\n    api[method][color] = (...items) => {\n      items = items.map(v => chalk[color](v));\n      api[method].apply(null, items);\n    };\n  });\n});\n\n\n\nexport default api;\n"]}
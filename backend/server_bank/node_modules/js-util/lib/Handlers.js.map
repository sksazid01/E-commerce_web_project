{"version":3,"sources":["../src/Handlers.js"],"names":[],"mappings":"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","file":"Handlers.js","sourcesContent":["/* eslint no-restricted-syntax:0 */\n\nimport R from 'ramda';\n\n\nconst createHandle = (handlers, func) => {\n  const handle = {\n    handlers,\n    func,\n    isStopped: false,\n\n    stop() {\n      if (handle.isStopped === true) { return; }\n      handle.isStopped = true;\n      handlers.items = R.remove(R.indexOf(handle, handlers.items), 1, handlers.items);\n    },\n\n    dispose() { this.stop(); },\n  };\n  return handle;\n};\n\n\n\n\n/*\nRepresents a collection of handler functions.\n*/\nexport default class Handlers {\n  /*\n  Constructor.\n  @param context: The [this] context within which to invoke the handlers.\n  @param handlers: An array of functions to add.\n  */\n  constructor(context, ...handlers) {\n    this.context = context;\n    this.items = [];\n    R.flatten(handlers).forEach((func) => this.push(func));\n  }\n\n  dispose() {\n    this.clear();\n    this.isDisposed = true;\n  }\n\n  /*\n  Gets the number of registered handlers.\n  */\n  count() { return this.items.length; }\n\n\n  /*\n  Gets whether the collection contains the given handler function.\n  */\n  contains(func) { return this.handle(func) !== undefined; }\n\n\n  /*\n  Gets the handle with the corresponding function.\n  */\n  handle(func) { return this.items.find(item => item.func === func); }\n\n\n  /*\n  Adds a function to the collection.\n  @param func: The handler function.\n  @returns A handle object.  Use 'stop()' to clear remove it.\n  */\n  add(func) {\n    let handle;\n    if (R.is(Function, func)) {\n      handle = createHandle(this, func);\n      this.items.push(handle);\n    }\n    return handle;\n  }\n\n  // Alias to 'add'.\n  push(func) { return this.add(func); }\n\n\n  /*\n  Adds a function from the collection.\n  @param func: The handler function to remove.\n  @returns true if the function was removed, or false if it was not found.\n  */\n  remove(func) {\n    const handle = this.items.find(item => item.func === func);\n    if (handle) {\n      this.items = R.remove(R.indexOf(handle, this.items), 1, this.items);\n    }\n    return handle !== undefined;\n  }\n\n\n  /*\n  Removes all functions from the collection.\n  */\n  clear() { this.items = []; }\n\n\n\n  /*\n  Invokes all handlers within the collection.\n  @param args: Optional. The arguments to pass.\n  @returns false if any handler returned false (ie. cancelled the operation in question).\n  */\n  invoke(...args) {\n    const items = R.clone(this.items);\n    for (const i in items) {\n      if ({}.hasOwnProperty.call(items, i)) {\n        const item = items[i];\n        const result = item.func.apply(this.context, args);\n        if (result === false) { return false; }\n      }\n    }\n    return true;\n  }\n\n\n  /*\n  Invokes handlers returning the first non-[null/undefined] returned by a handler.\n  @param args: Optional. The arguments to pass.\n  @returns the first handler result, or undefined.\n  */\n  firstResult(...args) {\n    const items = R.clone(this.items);\n    for (const i in items) {\n      if ({}.hasOwnProperty.call(items, i)) {\n        const item = items[i];\n        const result = item.func.apply(this.context, args);\n        if (result) {\n          return result;\n        }\n      }\n    }\n    return undefined;\n  }\n\n\n  /*\n  Invokes all handlers returning an array of all results.\n  @param args: Optional. The arguments to pass.\n  @returns the resulting array of results (including undefined/null values).\n  */\n  results(...args) {\n    const results = [];\n    const items = R.clone(this.items);\n    for (const i in items) {\n      if ({}.hasOwnProperty.call(items, i)) {\n        const item = items[i];\n        const result = item.func.apply(this.context, args);\n        results.push(result);\n      }\n    }\n    return results;\n  }\n\n\n  /*\n  Invokes all handlers asynchronously.\n  @param args: Optional. The arguments to pass.\n  @param callback(result): Invoked upon completion.\n                           - result: false if any handler returned false\n                             (ie. cancelled the operation in question).\n  */\n  invokeAsync(...args) {\n    const callback = R.last(args);\n    args.pop();\n    if (this.items.length === 0) {\n      callback(true);\n      return;\n    }\n\n    let isCancelled = false;\n    let count = 0;\n    const done = (result) => {\n      count += 1;\n      if (!isCancelled) {\n        if (result === false) { isCancelled = true; }\n        if (isCancelled) {\n          callback(false);\n        } else if (count === this.items.length) {\n          callback(true);\n        }\n      }\n    };\n    args.push(done);\n    this.items.forEach((item) => item.func.apply(this.context, args));\n  }\n}\n"]}
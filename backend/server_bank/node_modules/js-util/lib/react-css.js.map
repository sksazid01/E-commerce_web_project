{"version":3,"sources":["../src/react-css.js"],"names":[],"mappings":"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","file":"react-css.js","sourcesContent":["import R from 'ramda';\nimport { isBlank, toNumber, isPlainObject } from './index';\n\n\n/**\n * Takes an image path and breaks it into it's components pieces\n * providing 1x/2x versions of the image.\n *\n * @param {string} path: the raw file path to evaluate.\n * @return {object}\n */\nexport const expandImagePath = (path) => {\n  if (isBlank(path)) { throw new Error('Image path not specified.'); }\n\n  // Extract paths and file-name.\n  const index = R.lastIndexOf('/', path);\n  const basePath = path.substr(0, index + 1);\n  let fileName = path.substr(index + 1, path.length);\n  const parts = fileName.split('.');\n  if (parts.length < 2) {\n    throw new Error(`An image must have a file extension. [path: ${ path }]`);\n  }\n  fileName = parts[0];\n  const extension = parts[1];\n\n  // Finish up.\n  return {\n    basePath,\n    fileName,\n    extension,\n    '1x': `${ basePath }${ fileName }.${ extension }`,\n    '2x': `${ basePath }${ fileName }@2x.${ extension }`,\n  };\n};\n\n\n\n/**\n * Constructs a style object for an image.\n *\n *    For turning image files (PNG/JPG/SVG) into data-uri's see:\n *    https://github.com/webpack/url-loader\n *\n * @param {string} image1x: The normal image resolution (base64 encoded)\n * @param {string} image2x: The retina image resolution (base64 encoded)\n * @param {integer} width: Optional. The width of the image.\n * @param {integer} height: Optional. The height of the image.\n */\nexport const image = (image1x, image2x, { width = 10, height = 10 } = {}) => {\n  // Prepare image based on current screen density.\n  let img = global.devicePixelRatio > 1 ? image2x : image1x;\n  if (!img) { img = image1x; }\n  if (!img) { throw new Error('Must have at least a 1x image.'); }\n\n  // Finish up.\n  return {\n    backgroundImage: `url(${ img })`,\n    width,\n    height,\n    backgroundSize: `${ width }px ${ height }px`,\n    backgroundRepeat: 'no-repeat',\n  };\n};\n\n\n\nconst mergeAndReplace = (key, value, target) => {\n  Object.assign(target, value);\n  delete target[key];\n  return target;\n};\n\n\n\nconst formatImage = (key, value, target) => {\n  // Wrangle parameters.\n  let [image1x, image2x, width, height] = value; // eslint-disable-line\n\n  if (R.is(Number, image2x)) {\n    height = width;\n    width = image2x;\n    image2x = undefined;\n  }\n  const style = image(image1x, image2x, { width, height });\n  mergeAndReplace(key, style, target);\n};\n\n\n\n\n// ----------------------------------------------------------------------------\n\n\n\nexport const toPositionEdges = (key, value) => {\n  if (value === undefined || value === null) { return undefined; }\n  if (R.is(String, value) && isBlank(value)) { return undefined; }\n  if (R.is(Array, value) && value.length === 0) { return undefined; }\n  if (!R.is(Array, value)) {\n    value = value.toString().split(' ');\n  }\n  const edges = value.map(item => toNumber(item));\n  let top;\n  let right;\n  let bottom;\n  let left;\n\n  const getEdge = (index) => {\n    const edge = edges[index];\n    if (edge === null || edge === 'null' || edge === '') { return undefined; }\n    return edge;\n  };\n\n  switch (edges.length) {\n    case 1:\n      top = getEdge(0);\n      bottom = getEdge(0);\n      left = getEdge(0);\n      right = getEdge(0);\n      break;\n\n    case 2:\n      top = getEdge(0);\n      bottom = getEdge(0);\n      left = getEdge(1);\n      right = getEdge(1);\n      break;\n\n    case 3:\n      top = getEdge(0);\n      left = getEdge(1);\n      right = getEdge(1);\n      bottom = getEdge(2);\n      break;\n\n    default:\n      top = getEdge(0);\n      right = getEdge(1);\n      bottom = getEdge(2);\n      left = getEdge(3);\n  }\n\n  if (top === undefined && right === undefined && bottom === undefined && left === undefined) {\n    return undefined;\n  }\n  return {\n    position: key.toLowerCase(),\n    top, right, bottom, left,\n  };\n};\n\n\nconst formatPositionEdges = (key, target) => {\n  const styles = toPositionEdges(key, target[key]);\n  mergeAndReplace(key, styles, target);\n};\n\n\n/**\n * AbsoluteCenter\n *      - x\n *      - y\n *      - xy\n */\nconst formatAbsoluteCenter = (key, value, target) => {\n  if (value === true) { value = 'xy'; }\n  if (value === false || value === undefined || value === null) { return; }\n  const styles = { position: 'absolute' };\n  value = value.trim().toLowerCase();\n  if (value.includes('x')) { styles.left = '50%'; }\n  if (value.includes('y')) { styles.top = '50%'; }\n  let transform;\n  switch (value) {\n    case 'yx':\n    case 'xy': transform = 'translate(-50%, -50%)'; break;\n    case 'x': transform = 'translateX(-50%)'; break;\n    case 'y': transform = 'translateY(-50%)'; break;\n    default: throw new Error(`AbsoluteCenter value '${ value }' not supported.`);\n  }\n  styles.transform = `${ target.transform || '' } ${ transform }`.trim();\n  mergeAndReplace(key, styles, target);\n};\n\n\n// ----------------------------------------------------------------------------\n\n\n/**\n * Helpers for constructing a CSS object.\n * @param {object} styles: The style object to manipulate.\n * @return the resulting style object.\n */\nconst css = (styles = {}) => {\n  Object.keys(styles).forEach(key => {\n    const value = styles[key];\n    if (R.isNil(value)) {\n      delete styles[key];\n    } else if (isPlainObject(value)) {\n      styles[key] = css(value); // <== RECURSION.\n    } else {\n      switch (key) {\n        case 'Image': formatImage(key, value, styles); break;\n        case 'Absolute': formatPositionEdges(key, styles); break;\n        case 'Fixed': formatPositionEdges(key, styles); break;\n        case 'AbsoluteCenter': formatAbsoluteCenter(key, value, styles); break;\n        default:\n          // Ignore.\n      }\n    }\n  });\n\n  // Finish up.\n  return styles;\n};\n\n\n// ----------------------------------------------------------------------------\ncss.image = image;\nexport default css;\n"]}